[{"D:\\Proscend\\sh-app\\src\\index.js":"1","D:\\Proscend\\sh-app\\src\\i18n.js":"2","D:\\Proscend\\sh-app\\src\\App.js":"3","D:\\Proscend\\sh-app\\src\\context\\language-context.js":"4","D:\\Proscend\\sh-app\\src\\context\\app-context.js":"5","D:\\Proscend\\sh-app\\src\\components\\Loading.js":"6","D:\\Proscend\\sh-app\\src\\components\\Header.js":"7","D:\\Proscend\\sh-app\\src\\components\\Main.js":"8","D:\\Proscend\\sh-app\\src\\components\\LanguageSwitcher.js":"9","D:\\Proscend\\sh-app\\src\\components\\FileNode.js":"10","D:\\Proscend\\sh-app\\src\\utility\\papi.js":"11","D:\\Proscend\\sh-app\\src\\router\\pageRouter.js":"12","D:\\Proscend\\sh-app\\src\\components\\dashboard\\Dashboard.js":"13","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet.js":"14","D:\\Proscend\\sh-app\\src\\components\\wan\\connection_table.js":"15","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet_static.js":"16","D:\\Proscend\\sh-app\\src\\components\\wan\\connection_table_modal.js":"17","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet_pppoe.js":"18","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet_dhcp.js":"19"},{"size":361,"mtime":1614519081634,"results":"20","hashOfConfig":"21"},{"size":548,"mtime":1614519073468,"results":"22","hashOfConfig":"21"},{"size":1435,"mtime":1614407189536,"results":"23","hashOfConfig":"21"},{"size":810,"mtime":1614407189536,"results":"24","hashOfConfig":"21"},{"size":1115,"mtime":1614407189536,"results":"25","hashOfConfig":"21"},{"size":759,"mtime":1614519171339,"results":"26","hashOfConfig":"21"},{"size":752,"mtime":1614407189536,"results":"27","hashOfConfig":"21"},{"size":4488,"mtime":1614519156072,"results":"28","hashOfConfig":"21"},{"size":1222,"mtime":1614407189536,"results":"29","hashOfConfig":"21"},{"size":1421,"mtime":1614519235838,"results":"30","hashOfConfig":"21"},{"size":1227,"mtime":1614518783544,"results":"31","hashOfConfig":"21"},{"size":847,"mtime":1614407189552,"results":"32","hashOfConfig":"21"},{"size":13996,"mtime":1614407189536,"results":"33","hashOfConfig":"21"},{"size":2061,"mtime":1614519579341,"results":"34","hashOfConfig":"21"},{"size":10572,"mtime":1614487715892,"results":"35","hashOfConfig":"21"},{"size":7045,"mtime":1614520338754,"results":"36","hashOfConfig":"21"},{"size":9560,"mtime":1614520411132,"results":"37","hashOfConfig":"21"},{"size":6128,"mtime":1614523429033,"results":"38","hashOfConfig":"21"},{"size":6624,"mtime":1614520190071,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1afz1rk",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"42"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"42"},"D:\\Proscend\\sh-app\\src\\index.js",[],["88","89"],"D:\\Proscend\\sh-app\\src\\i18n.js",[],"D:\\Proscend\\sh-app\\src\\App.js",[],"D:\\Proscend\\sh-app\\src\\context\\language-context.js",[],"D:\\Proscend\\sh-app\\src\\context\\app-context.js",["90"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport * as PAPI from \"../utility/papi\";\r\nimport Menulist from \"../static/menu.json\";\r\n\r\n\r\nconst AppContext = createContext({\r\n  menulist:{},\r\n  showloading: true, \r\n  cfgShowLoading: ()=>{}\r\n});\r\n\r\nexport const AppContextProvider = ({ children })=> {\r\n  \r\n  //const [theme, setTheme] = useState('light');\r\n  const [showloading, setShowloading] = useState(true);\r\n  const [menulist, setMenulist] = useState({});\r\n  \r\n  // Method to update state\r\n  const cfgMenulist = () => {\r\n    setMenulist(Menulist);\r\n    /* PAPI.PApiGet({ url: \"menu.json\" })\r\n        .then((data) => {          \r\n          setMenulist(data);\r\n        })\r\n        .catch((err) => console.log(err));    */ \r\n  }\r\n\r\n  const cfgShowLoading = (isshow) => {\r\n    setShowloading(isshow);\r\n    console.log(\"isshow=\",isshow, showloading)\r\n  }  \r\n  \r\n\r\n  useEffect(() => {    \r\n    cfgMenulist();\r\n  }, []);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ menulist, showloading, cfgShowLoading }}>\r\n       {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\n\r\nexport default AppContext;","D:\\Proscend\\sh-app\\src\\components\\Loading.js",["91","92"],"import React, {useState, useContext} from \"react\";\r\nimport LanguageContext from \"../context/language-context\";\r\nimport AppContext from \"../context/app-context\";\r\n\r\nconst Loading = () => {\r\n  let { showloading } = useContext(AppContext);\r\n  \r\n  return (\r\n    <> \r\n      {showloading ? (\r\n        <div className='loading-Container'>\r\n          <div className='loader'>\r\n            <div className='loader--dot'></div>\r\n            <div className='loader--dot'></div>\r\n            <div className='loader--dot'></div>\r\n            <div className='loader--dot'></div>\r\n            <div className='loader--dot'></div>\r\n            <div className='loader--dot'></div>\r\n          </div>\r\n        </div>) : null\r\n      }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","D:\\Proscend\\sh-app\\src\\components\\Header.js",["93"],"import React, { useState } from \"react\";\r\nimport { Grid } from '@material-ui/core';\r\nimport LanguageSwitcher from \"../components/LanguageSwitcher\";\r\n\r\nexport default function Header() { \r\n\r\n  let logo = \"./images/sh1.png\";\r\n  return (\r\n\r\n    <div className=\"header\">\r\n\r\n      <Grid container item\r\n        xs={12}\r\n        spacing={1}>\r\n\r\n        <Grid item\r\n          xs={3}>\r\n          <div className=\"logo\">\r\n            <img alt=\"Snow\"\r\n              src={logo}\r\n              width=\"65\"\r\n              height=\"65\" />\r\n          </div>\r\n        </Grid>\r\n\r\n        <Grid item\r\n          xs={9}>\r\n          <div className=\"logo float-right\">\r\n            <LanguageSwitcher />\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </div>\r\n  );\r\n}\r\n","D:\\Proscend\\sh-app\\src\\components\\Main.js",[],"D:\\Proscend\\sh-app\\src\\components\\LanguageSwitcher.js",[],"D:\\Proscend\\sh-app\\src\\components\\FileNode.js",[],"D:\\Proscend\\sh-app\\src\\utility\\papi.js",["94","95","96","97"],"import axios from 'axios';\r\n\r\nvar guiObj = [\r\n  //Demo(Mockdata)\r\n  {\r\n    cgi: \"./mockconfig/\",\r\n    baseurl: \"\"\r\n    //baseurl: \"http://localhost:3000\"\r\n  },\r\n  //Debug (CROS)\r\n  {\r\n    cgi: \"/cgi-bin/\",\r\n    baseurl: \"http://192.168.1.35\"\r\n  },\r\n  //Release\r\n  {\r\n    cgi: \"/cgi-bin/\",\r\n    baseurl: \"\"\r\n  }\r\n];\r\n\r\nvar Demo = 0; //mockdata\r\nvar Debug = 1; //CROS\r\nvar Release = 2;\r\n\r\nvar GUI_Flag = Demo;\r\n\r\nvar cgi = guiObj[GUI_Flag].cgi;\r\nvar baseurl = guiObj[GUI_Flag].baseurl;\r\n\r\nexport const PApiGet = async (obj) => {\r\n\r\n  let objurl = obj.url;\r\n  if (GUI_Flag == Demo) {\r\n    if ((obj.url).indexOf('?') >= 0) {\r\n      objurl = (obj.url).split('?').join('_');\r\n    }\r\n  }\r\n\r\n  let url = baseurl + cgi + objurl;\r\n  const response = await axios.get(url);\r\n  return response.data;\r\n\r\n}\r\n\r\nexport const PApiGetAll = async (requests) => {\r\n\r\n  let promises = [];\r\n  for (let i = 0; i < requests.length; i++) {\r\n    let objurl = requests[i].url;\r\n    if (GUI_Flag == Demo) {\r\n      if ((requests[i].url).indexOf('?') >= 0) {\r\n        objurl = (requests[i].url).split('?').join('_');\r\n      }\r\n    }\r\n    let url = baseurl + cgi + objurl;\r\n    promises.push(axios.get(url));\r\n  }\r\n  return await axios.all(promises);\r\n}\r\n\r\n\r\n","D:\\Proscend\\sh-app\\src\\router\\pageRouter.js",[],"D:\\Proscend\\sh-app\\src\\components\\dashboard\\Dashboard.js",["98"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport AppContext from \"../../context/app-context\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport * as PAPI from \"../../utility/papi\";\r\n\r\nexport default function Dashboard() {\r\n  const { cfgShowLoading } = useContext(AppContext);\r\n  const { t } = useTranslation();\r\n  const [status, setStatus] = useState({});\r\n\r\n  useEffect(() => {\r\n    cfgShowLoading(true);\r\n    const getData = () => {\r\n      PAPI.PApiGet({ url: \"status.cgi?act=status\" })\r\n        .then((data) => {\r\n          console.log(\"config data\", JSON.stringify(data));\r\n          setStatus(data.status);\r\n        })\r\n        .catch((err) => console.log(err));\r\n    };\r\n    getData();\r\n    setTimeout(function () {\r\n      cfgShowLoading(false);\r\n    }, 1000);\r\n  }, []);\r\n\r\n  return (status.modem0) ? (\r\n    <div className=\"m-bottom-20\">\r\n      <Typography\r\n        variant=\"h6\"\r\n        gutterBottom\r\n        color=\"primary\"\r\n        className=\"m-bottom-20\"\r\n      >\r\n        {t(\"MENU_STATUS\")}\r\n      </Typography>\r\n\r\n      <Grid container item xs={12} spacing={2}>\r\n        <Grid item md={6} xs={12}>\r\n          <div className=\"card card-pink\">\r\n            <div className=\"card-header card-header-pink\">{t('STATUS_PANEL_TITLE_SIM1')}</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_MODEM_SIM_STATUS')}</div>\r\n              <div className=\"main-description\">{status.modem0.modem_sim_status}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_MODEM_OPERATOR_NAME')}</div>\r\n              <div className=\"main-description\">{status[\"modem0\"].modem_operator_name}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_MODEM_SIM_IMSI')}</div>\r\n              <div className=\"main-description\">{status.modem0.modem_sim_imsi}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_MODEM_SIM_IMEI')}</div>\r\n              <div className=\"main-description\">{status.modem0.modem_sim_imei}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_PHONE_NUMBER')}</div>\r\n              <div className=\"main-description\">{status.modem0.phone_number}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\r\n              <div className=\"main-description\">{status.lte_dpip0.ipinfo.ipRmt}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\r\n              <div className=\"main-description\">{status.lte_dpip0.ipinfo.ipMask}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_DEFAULT_GATEWAY')}</div>\r\n              <div className=\"main-description\">{status.lte_dpip0.ipinfo.default_gw}</div>\r\n            </div>            \r\n          </div>          \r\n        </Grid>\r\n\r\n        <Grid item md={6} xs={12}>\r\n        <div className=\"card card-yellow\">\r\n            <div className=\"card-header card-header-yellow\">{t('STATUS_PANEL_TITLE_WAN_ETH')}</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\r\n              <div className=\"main-description\">{status.eth_proto4.ipRmt}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\r\n              <div className=\"main-description\">{status.eth_proto4.ipMask}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_DEFAULT_GATEWAY')}</div>\r\n              <div className=\"main-description\">{status.eth_proto4.default_gw}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #1</div>\r\n              <div className=\"main-description\">{status.eth_proto4.dns4_1}</div>\r\n            </div>\r\n            <div className=\"card-main\">              \r\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #2</div>\r\n              <div className=\"main-description\">{status.eth_proto4.dns4_2}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #3</div>\r\n              <div className=\"main-description\">{status.eth_proto4.dns4_3}</div>\r\n            </div>\r\n            <div className=\"card-main\">              \r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n          </div>          \r\n        </Grid>\r\n\r\n        <Grid item md={6} xs={12}>\r\n        <div className=\"card card-blue\">\r\n            <div className=\"card-header card-header-blue\">{t('STATUS_PANEL_TITLE_WAN_WIFI')}</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\r\n              <div className=\"main-description\">{status.wan_wifi_proto4.ipRmt}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\r\n              <div className=\"main-description\">{status.wan_wifi_proto4.ipRmt}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_DEFAULT_GATEWAY')}</div>\r\n              <div className=\"main-description\">{status.wan_wifi_proto4.ipMask}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #1</div>\r\n              <div className=\"main-description\">{status.wan_wifi_proto4.dns4_1}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #2</div>\r\n              <div className=\"main-description\">{status.wan_wifi_proto4.dns4_2}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #3</div>\r\n              <div className=\"main-description\">{status.wan_wifi_proto4.dns4_3}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_WIFI_SSID')}</div>\r\n              <div className=\"main-description\">{status.wan_wifi.wan_wifi_ssid}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_WIFI_CHANNEL')}</div>\r\n              <div className=\"main-description\">{status.wan_wifi.wan_wifi_channel}</div>\r\n            </div>\r\n          </div>          \r\n        </Grid>\r\n\r\n        <Grid item md={6} xs={12}>\r\n        <div className=\"card card-green\">\r\n            <div className=\"card-header card-header-green\">{t('STATUS_PANEL_TITLE_LAN_ETH')}</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\r\n              <div className=\"main-description\">{status.lan_status.addr}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\r\n              <div className=\"main-description\">{status.lan_status.mask}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV6_ADDR')}</div>\r\n              <div className=\"main-description\">{status.current_lte_proto6.addr6_lan}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('STATUS_IPV6_MASK')}</div>\r\n              <div className=\"main-description\">{status.current_lte_proto6.plen_lan}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV6_DNS_SERVER')} #1</div>\r\n              <div className=\"main-description\">{status.lan_status.dns6_1}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV6_DNS_SERVER')} #2</div>\r\n              <div className=\"main-description\">{status.lan_status.dns6_2}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">{t('WANDNS_IPV6_DNS_SERVER')} #3</div>\r\n              <div className=\"main-description\">{status.lan_status.dns6_3}</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n          </div>          \r\n        </Grid>\r\n\r\n        {/* <Grid item md={6} xs={12}>\r\n        <div className=\"card card-yellow\">\r\n            <div className=\"card-header card-header-yellow\">Night</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">              \r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n          </div>          \r\n        </Grid>\r\n\r\n        <Grid item md={6} xs={12}>\r\n        <div className=\"card card-yellow\">\r\n            <div className=\"card-header card-header-yellow\">Night</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n          </div>          \r\n        </Grid>\r\n\r\n        <Grid item md={6} xs={12}>\r\n        <div className=\"card card-green\">\r\n            <div className=\"card-header card-header-green\">Night</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">              \r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n          </div>          \r\n        </Grid>\r\n\r\n        <Grid item md={6} xs={12}>\r\n        <div className=\"card card-green\">\r\n            <div className=\"card-header card-header-green\">Night</div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\">Hot Tub</div>\r\n              <div className=\"main-description\">description</div>\r\n            </div>\r\n            <div className=\"card-main\">              \r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n            <div className=\"card-main\">\r\n              <div className=\"main-title\"></div>\r\n              <div className=\"main-description\"></div>\r\n            </div>\r\n          </div>          \r\n        </Grid> */}\r\n      </Grid>\r\n    </div>\r\n  ) : '';\r\n}\r\n\r\n//export default Dashboard;\r\n","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet.js",[],"D:\\Proscend\\sh-app\\src\\components\\wan\\connection_table.js",["99","100"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport AppContext from \"../../context/app-context\";\r\nimport { useTranslation } from 'react-i18next';\r\nimport * as PAPI from \"../../utility/papi\";\r\n\r\nimport EditWin from \"./connection_table_modal.js\";\r\n\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {\r\n  Button, IconButton, TextField, Select, InputBase,\r\n  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography,\r\n  Paper, Grid\r\n} from '@material-ui/core';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst ConnectionTable = () => {\r\n  const { cfgShowLoading } = useContext(AppContext);\r\n  const { t } = useTranslation();\r\n\r\n  const useStyles = makeStyles({\r\n    table: {\r\n      minWidth: 700,\r\n    },\r\n  });  \r\n  const classes = useStyles();\r\n\r\n  const dfEditCfg = {\r\n    idx: -1,\r\n    cfg: {}\r\n  };\r\n  \r\n  const [cfgdata, setCfgdata] = useState({}); \r\n  \r\n  const [showModal, setShowModal] = useState(false);\r\n  const [editCfg, setEditCfg] = useState(dfEditCfg);\r\n  //const classes = useStyles();\r\n  let prof = \"CONN_PROF_\" + cfgdata.act_prof;\r\n  let connProf = cfgdata[prof];\r\n  console.log(\"connProfXX =\", JSON.stringify(connProf));\r\n\r\n  const getData = () => {\r\n    PAPI.PApiGet({ url: \"connection_table.cgi?act=config\" })\r\n      .then((data) => {\r\n      console.log(\"config data====\", JSON.stringify(data));  \r\n        setCfgdata(data.config);\r\n        setTimeout(() => {\r\n          cfgShowLoading(false);\r\n        }, 1000);\r\n        \r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        cfgShowLoading(false);\r\n      });\r\n  };\r\n\r\n  const setData = () => {\r\n    console.log(\"setData\", JSON.stringify(cfgdata));\r\n    setCfgdata(cfgdata);\r\n    //PAPI.PApiSet\r\n    getData();\r\n  };  \r\n\r\n  useEffect(() => {\r\n    console.log(\"=sh= useEffect cfgdata=\", JSON.stringify(cfgdata));\r\n    //setPfNum(() => new Array(cfgdata.prof_num).fill(0));\r\n  }, [cfgdata]);\r\n\r\n  /* useEffect(() => {\r\n    console.log(\"=sh= connProf\", JSON.stringify(connProf));\r\n    setEditCfg(dfEditCfg);\r\n    setShowModal(false);\r\n  }, [connProf]); */\r\n\r\n  useEffect(() => {\r\n    console.log(\"=sh= entryEdit useEffect editCfg=\", JSON.stringify(editCfg));\r\n    if (Object.keys(editCfg).length > 0 && editCfg.idx >= 0) {\r\n      setShowModal(true);\r\n    }\r\n  }, [editCfg]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"=sh= useEffect ================\", JSON.stringify(cfgdata));\r\n    cfgShowLoading(true);\r\n    getData();\r\n    //getData();\r\n  }, []);\r\n\r\n\r\n\r\n  function onModalApply(edCfg) {\r\n    let applycfg = { ...connProf };\r\n    applycfg[\"profile_list\"][edCfg.idx] = edCfg.cfg;\r\n    console.log(\"onModalApply applycfg(2)=\", JSON.stringify(applycfg));\r\n    //setConnProf(applycfg);\r\n    setShowModal(false);\r\n  }\r\n\r\n  function onModalCancel() {\r\n    setShowModal(false);\r\n\r\n  }\r\n\r\n  function entryEdit(idx) {\r\n    let cfg = JSON.parse(JSON.stringify(connProf[\"profile_list\"][idx]));\r\n    console.log(\"=sh= entryEdit idx=\", idx, JSON.stringify(cfg));\r\n    setEditCfg({ idx, cfg });\r\n    //console.log(\"=sh= entryEdit editCfg=\", editCfg);\r\n    //setShowModal(true);\r\n  }\r\n\r\n  function entryDelete(idx) {\r\n    //let cfg = JSON.parse(JSON.stringify(connProf[\"profile_list\"][idx]));\r\n    let cfg = JSON.parse(JSON.stringify(cfgdata));\r\n    let prof = \"CONN_PROF_\" + cfg.act_prof;\r\n    let connProf = cfg[prof];\r\n    console.log(\"=sh= entryDelete idx=\", idx,connProf);\r\n    connProf[\"profile_list\"].splice(idx, 1);\r\n    //setEditCfg({idx, cfg});\r\n    console.log(\"=sh= entryDelete cfg=\", JSON.stringify(cfg));\r\n    setCfgdata({...cfg});\r\n    //setShowModal(true);\r\n  }\r\n\r\n  function onApply() {\r\n    console.log(\"onApply (cfgdata)=\", JSON.stringify(cfgdata));\r\n    cfgShowLoading(true);\r\n    setData();    \r\n  }\r\n\r\n  function onReset() {\r\n    console.log(\"onReset=\", JSON.stringify(cfgdata));\r\n    cfgShowLoading(true);\r\n    setTimeout(function () { getData(); }, 1000);\r\n  }  \r\n\r\n  const handleChangeProfile = (e) => {\r\n    //const act_prof = e.target.value;\r\n    //let prof = \"CONN_PROF_\" + act_prof;\r\n    setCfgdata({\r\n      ...cfgdata,\r\n      act_prof: e.target.value\r\n    });\r\n    //setConnProf({...cfgdata[prof]});\r\n  };\r\n\r\n  function setInputValue(e) {\r\n    console.log(\"setInputValue target =\", e.target.id, e.target.value);\r\n    //const val = e.target.value;\r\n    let prof = \"CONN_PROF_\" + cfgdata.act_prof;\r\n    setCfgdata({\r\n      ...cfgdata,\r\n      [prof]: {\r\n        ...cfgdata[prof], \r\n        [e.target.id]: e.target.value\r\n      }\r\n    });   \r\n  }  \r\n\r\n  return (cfgdata && Object.keys(cfgdata).length === 0 && cfgdata.constructor === Object) ? \r\n  '':\r\n  (\r\n    <>\r\n      <div className=\"pageContainer\">\r\n        <div className=\"pageMainContainer\">\r\n          <div className=\"pageMain\">\r\n            {/* title */}\r\n            <Typography variant=\"h6\" gutterBottom color=\"primary\" className=\"m-bottom-20\">\r\n              {t('CONN_TBL_TITLE')}\r\n            </Typography>\r\n\r\n            {/* config */}\r\n            <Grid container spacing={1}>\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item md={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('PROFILE')} />\r\n                </Grid>\r\n                <Grid item md={5} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={cfgdata.act_prof} \r\n                    onChange={handleChangeProfile}\r\n                    fullWidth\r\n                    variant=\"filled\"\r\n                    inputProps={{\r\n                      name: 'act_prof',\r\n                      id: 'act_prof'\r\n                    }}\r\n                  >\r\n                    {new Array(cfgdata.prof_num).fill(0).map(\r\n                      (item, idx) => {\r\n                        return (<option key={idx} value={idx + 1}>{idx + 1}</option>)\r\n                      }\r\n                    )}\r\n                  </Select>}\r\n                </Grid>\r\n              </Grid>\r\n\r\n\r\n              <Grid container item xs={12} spacing={1} my={5}>\r\n\r\n                <Grid item md={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('NAME')} />\r\n                </Grid>\r\n                <Grid item md={5} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    id=\"profile_name\"\r\n                    value={connProf.profile_name}\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    onChange={(e) => setInputValue(e)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1} my={5}>\r\n                <Grid item md={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('WAN_PORT_AS')}\r\n                  />\r\n                </Grid>\r\n                <Grid item md={5} xs={12}>\r\n                  <TextField\r\n                    id=\"wan_work_as-text\"\r\n                    value={cfgdata.wan_port_as}\r\n                    fullWidth\r\n                    className=\"base-input\"\r\n                    InputProps={{\r\n                      readOnly: true,\r\n                      disableUnderline: true\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* table */}\r\n            <div className=\"p-top-bottom-30\"></div>\r\n            <TableContainer component={Paper}>\r\n              <Table className={classes.table} aria-label=\"customized table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>#</TableCell>\r\n                    <TableCell align=\"center\">{t('PRIORITY')}</TableCell>\r\n                    <TableCell align=\"center\">{t('ECMP_WEIGHT')}</TableCell>\r\n                    <TableCell align=\"center\">{t('INTERFACE')}</TableCell>\r\n                    <TableCell align=\"center\">{t('PROTOCOL')}</TableCell>\r\n                    <TableCell align=\"center\">{t('SVCPORT_ENTRY_ACTION')}</TableCell>\r\n                    \r\n                  </TableRow>\r\n                </TableHead>\r\n                {/* <TableBody> */}\r\n                {!connProf[\"profile_list\"] ?\r\n                  (<TableBody><TableRow><TableCell></TableCell></TableRow></TableBody>) : (\r\n                    <TableBody>\r\n                      {connProf[\"profile_list\"].map((item, idx) => (\r\n                        <TableRow key={idx}>\r\n                          <TableCell component=\"th\" scope=\"row\">\r\n                            {idx + 1}\r\n                          </TableCell>\r\n                          <TableCell align=\"center\">{item.prio}</TableCell>\r\n                          <TableCell align=\"center\">{item[\"ecmp_weight\"]}</TableCell>\r\n                          <TableCell align=\"center\">{item[\"iface_id\"]}</TableCell>\r\n                          <TableCell align=\"center\">{item.proto6}</TableCell>\r\n                          <TableCell align=\"center\">\r\n                            <IconButton onClick={() => entryEdit(idx)}>\r\n                              <EditIcon />\r\n                            </IconButton>\r\n                          &nbsp;&nbsp;\r\n                          <IconButton onClick={() => entryDelete(idx)}>\r\n                              <DeleteForeverIcon />\r\n                            </IconButton>\r\n\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))}\r\n                    </TableBody>\r\n                  )\r\n                }\r\n                {/* </TableBody> */}\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"pageFooterContainer\">\r\n          <div className=\"pageFooter\">\r\n            <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\r\n              onClick={() => onReset()}>\r\n              {t('RESET')}\r\n            </Button>\r\n            <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => onApply()}>\r\n              {t('APPLY')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {!showModal ? '' : (<EditWin\r\n        visible={showModal}\r\n        title=\"Test Modal\"\r\n        onModalApply={(data) => { onModalApply(data); }}\r\n        onModalCancel={() => { onModalCancel(); }}\r\n        editCfg={editCfg}\r\n      >\r\n      </EditWin>)}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConnectionTable;\r\n","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet_static.js",[],"D:\\Proscend\\sh-app\\src\\components\\wan\\connection_table_modal.js",["101","102","103","104"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/PROSModal.css';\r\nimport { withTranslation } from 'react-i18next';\r\nimport {\r\n  Button, IconButton, TextField, Select, InputBase, Grid\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nclass PROSModalClass extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dataCfg: this.props.editCfg\r\n    };\r\n    console.log(\"=sh= dataCfg=\", JSON.stringify(this.state.dataCfg));\r\n  }\r\n\r\n  static propTypes = {\r\n    visible: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    onModalApply: PropTypes.func,\r\n    onModalCancel: PropTypes.func,\r\n    editCfg: PropTypes.object\r\n  }\r\n  static defaultProps = {\r\n    visible: true,\r\n    title: '',\r\n    onModalApply: () => { },\r\n    onModalCancel: () => { },\r\n    editCfg: {}\r\n  }\r\n\r\n  setInputValueNum(e) {\r\n    let dataObj = { ...this.state.dataCfg };\r\n    dataObj.cfg[e.target.id] = parseInt(e.target.value);\r\n    this.setState({ ...dataObj });\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const {\r\n      visible,\r\n      title,\r\n      onModalApply,\r\n      onModalCancel\r\n    } = this.props,\r\n      show = {\r\n        zIndex: 2000,\r\n        opacity: 1\r\n      },\r\n      hide = {\r\n        zIndex: -1,\r\n        opacity: 0\r\n      },\r\n      contShow = {\r\n        width: '70%',\r\n      },\r\n      contHide = {\r\n        width: '0px',\r\n        height: '0px'\r\n      };\r\n\r\n    let { dataCfg } = this.state;\r\n    \r\n    let WAN_PROTO_OFF = 0x01;\r\n    let WAN_PROTO_DHCPC6 = 0x02;\r\n    let WAN_PROTO_BRIDGE = 0x04;\r\n    let WAN_PROTO_MGMT_RT = 0x08;\r\n    let WAN_PROTO_WIFI = 0x10;\r\n    let WAN_PROTO_DHCPC4 = 0x20;\r\n    let WAN_PROTO_STATIC_IP4 = 0x40;\r\n    let WAN_PROTO_PPPOE4 = 0x80;\r\n    let ptlObj = {\r\n      \"ETHNET\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_PPPOE4,\r\n        \"label\": \"PPPOE_CLIENT\"\r\n      }, {\r\n        \"val\": WAN_PROTO_STATIC_IP4,\r\n        \"label\": \"STATIC_IPV4\"\r\n      }, {\r\n        \"val\": WAN_PROTO_DHCPC4,\r\n        \"label\": \"DHCP_V4\"\r\n      }],\r\n      \"WIFI\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_WIFI,\r\n        \"label\": \"WIFI\"\r\n      }],\r\n      \"MOBILE_APN\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_DHCPC4,\r\n        \"label\": \"DHCP_V4\"\r\n      }],\r\n      \"MOBILE_APN2\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_DHCPC4,\r\n        \"label\": \"DHCP_V4\"\r\n      }]\r\n    };\r\n\r\n    let ifcObjArr = [{\r\n      \"id\": 1,\r\n      \"label\": \"WAN Ethernet\",\r\n      \"iface\": \"eth1\",\r\n      \"ifc_type\": \"ETHNET\"\r\n    }, {\r\n      \"id\": 3,\r\n      \"label\": \"Mobile#1_APN\",\r\n      \"iface\": \"eth2.1\",\r\n      \"ifc_type\": \"MOBILE_APN\"\r\n    }, {\r\n      \"id\": 55,\r\n      \"label\": \"WAN WiFi (2.4 GHz)\",\r\n      \"iface\": \"ath11\",\r\n      \"ifc_type\": \"WIFI\"\r\n    }, {\r\n      \"id\": 56,\r\n      \"label\": \"WAN WiFi (5 GHz)\",\r\n      \"iface\": \"ath31\",\r\n      \"ifc_type\": \"WIFI\"\r\n    }];\r\n\r\n    let VLAN_SUBNET_NONE = 0;\r\n    let VLAN_SUBNET_1 = 101;\r\n    let VLAN_SUBNET_2 = 102;\r\n    let VLAN_SUBNET_3 = 103;\r\n    let VLAN_SUBNET_4 = 104;\r\n    let VLAN_SUBNET_5 = 105;\r\n    let VLAN_SUBNET_6 = 106;\r\n    let VLAN_SUBNET_7 = 107;\r\n    let VLAN_SUBNET_8 = 108;\r\n   \r\n    return (\r\n      <div className=\"gy-modalContainer\" style={visible ? show : hide}>\r\n        <div className=\"mask\" onClick={() => onModalCancel()}></div>\r\n        <div className=\"innerContent modal-dialog-scrollable\" style={visible ? contShow : contHide}>\r\n\r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" color=\"primary\">{t('CONN_TBL_TITLE')}-{title}</h5>\r\n              <IconButton aria-label=\"Close\" className=\"padding-0\" onClick={() => onModalCancel()}>\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('INTERFACE')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={dataCfg.cfg.iface_id}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      name: 'iface_id',\r\n                      id: 'iface_id'\r\n                    }}\r\n                  >\r\n                    {ifcObjArr.map(\r\n                      (item, idx) => {\r\n                        return (<option key={item.id} value={item.id}>{item.label}</option>)\r\n                      }\r\n                    )}\r\n                  </Select>}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('PROTOCOL')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={dataCfg.cfg.protocol_val}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      name: 'protocol_val',\r\n                      id: 'protocol_val'\r\n                    }}\r\n                  >\r\n                    {ptlObj[\"ETHNET\"].map(\r\n                      (item, idx) => {\r\n                        return (<option key={item.val} value={item.val}>{item.label}</option>)\r\n                      }\r\n                    )}\r\n                  </Select>}\r\n\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('BRIDGE_INTERFACE')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={dataCfg.cfg.bridge_iface_id}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      name: 'bridge_iface_id',\r\n                      id: 'bridge_iface_id'\r\n                    }}\r\n                  >\r\n                    <option value={VLAN_SUBNET_1}>NET1</option>\r\n                    <option value={VLAN_SUBNET_2}>NET2</option>\r\n                    <option value={VLAN_SUBNET_3}>NET3</option>\r\n                    <option value={VLAN_SUBNET_4}>NET4</option>\r\n                    <option value={VLAN_SUBNET_5}>NET5</option>\r\n                    <option value={VLAN_SUBNET_6}>NET6</option>\r\n                    <option value={VLAN_SUBNET_7}>NET7</option>\r\n                    <option value={VLAN_SUBNET_8}>NET8</option>\r\n                  </Select>}\r\n\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('PRIORITY')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    fullWidth\r\n                    id=\"prio\"\r\n                    type=\"number\"\r\n                    value={dataCfg.cfg.prio}\r\n                    variant=\"filled\"\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    inputProps={{ min: \"1\", max: \"20\", step: \"1\" }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('ECMP_WEIGHT')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    fullWidth\r\n                    id=\"ecmp_weight\"\r\n                    type=\"number\"\r\n                    value={dataCfg.cfg.ecmp_weight}\r\n                    variant=\"filled\"\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    inputProps={{ min: \"1\", max: \"100\", step: \"1\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('_0_OFF')} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </div>\r\n\r\n            <div className=\"modal-footer\">\r\n              <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\r\n                onClick={() => onModalCancel()}>\r\n                {t('CANCEL')}\r\n              </Button>\r\n              <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => onModalApply(dataCfg)}>\r\n                {t('APPLY')}\r\n              </Button>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst PROSModal = withTranslation()(PROSModalClass);\r\nexport default PROSModal;","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet_pppoe.js",["105"],"import React, { Component } from 'react';\r\nimport AppContext from \"../../context/app-context\";\r\nimport { withTranslation } from 'react-i18next';\r\nimport {\r\n  Button, IconButton, TextField, InputBase, Grid, Input\r\n} from '@material-ui/core';\r\n\r\nimport * as PAPI from \"../../utility/papi\";\r\n\r\nimport FilledInput from '@material-ui/core/FilledInput';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nclass WANEthPPPoEClass extends Component {\r\n  static contextType = AppContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cfg: {},\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let self = this;\r\n    let { cfgShowLoading } = this.context;\r\n    cfgShowLoading(true);\r\n    self.getData();\r\n  }\r\n\r\n  getData = () => {\r\n    let { cfgShowLoading } = this.context;\r\n    PAPI.PApiGet({ url: \"pppoe.cgi?act=config\" })\r\n      .then((data) => {\r\n        this.setState((prevState, props) => ({\r\n          cfg: data.config\r\n        }));\r\n        setTimeout(() => {\r\n          cfgShowLoading(false);\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        setTimeout(() => {\r\n          cfgShowLoading(false);\r\n        }, 1000);\r\n        console.log(err)\r\n      });\r\n  };\r\n  \r\n  handleClickShowPassword = () => {\r\n    const { showPassword } = this.state;    \r\n    this.setState(() => ({\r\n      showPassword: !showPassword\r\n    }));\r\n  };\r\n\r\n  handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  setInputValue = (e) => {\r\n    this.setState((state) => ({\r\n      cfg: {\r\n        [e.target.id]: e.target.value\r\n      }\r\n    }));\r\n  }\r\n\r\n  onApply = () => {\r\n    let self = this;\r\n    let { cfgShowLoading } = this.context;\r\n    console.log(\"onApply cfg=\", JSON.stringify(this.state.cfg));\r\n    cfgShowLoading(true);\r\n    setTimeout(function () { self.getData(); }, 1000);\r\n  }\r\n\r\n  onReset = () => {\r\n    let self = this;\r\n    let { cfgShowLoading } = this.context;\r\n    cfgShowLoading(true);\r\n    setTimeout(function () { self.getData(); }, 1000);\r\n  }  \r\n\r\n  render() \r\n  {\r\n    const { t } = this.props;\r\n    const { showPassword } = this.state;\r\n    let { cfg } = this.state;\r\n    return (cfg && Object.keys(cfg).length === 0 && cfg.constructor === Object) ? \r\n    '':\r\n    (\r\n      <>        \r\n        <div className=\"subTitle\">{t('WANETHERNET_LEGEND_PPPOE')}</div>\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item md={3} xs={12}>\r\n            <InputBase\r\n              className=\"base-input\"\r\n              value={t('WANETHERNET_USER_NAME')} />\r\n          </Grid>\r\n\r\n          <Grid item md={6} xs={12}>\r\n            <TextField\r\n              hiddenLabel\r\n              id=\"szUsername\"\r\n              value={cfg.szIfName}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              onChange={(e) => this.setInputValue(e)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item md={3} xs={12}>\r\n            <InputBase\r\n              className=\"base-input\"\r\n              value={t('WANETHERNET_PASSWORD')} />\r\n          </Grid>\r\n\r\n          <Grid item md={6} sm={12}> \r\n          <Input \r\n            hiddenLabel \r\n            id=\"standard-adornment-password\"\r\n            type={showPassword ? 'text' : 'password'} \r\n            variant=\"filled\" \r\n            fullWidth             \r\n            value={cfg.szPassword} \r\n            onChange={(e) => this.setInputValue(e)}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={this.handleClickShowPassword}\r\n                    onMouseDown={this.handleMouseDownPassword}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n          />\r\n\r\n          \r\n            {/* <FilledInput\r\n              hiddenLabel\r\n              fullWidth\r\n              id=\"szPassword\"\r\n              type={showPassword ? 'text' : 'password'}\r\n              value={cfg.szPassword}\r\n              onChange={(e) => this.setInputValue(e)}\r\n              endAdornment={\r\n                <InputAdornment position=\"end\">\r\n                  <IconButton\r\n                    aria-label=\"toggle password visibility\"\r\n                    onClick={this.handleClickShowPassword}\r\n                    onMouseDown={this.handleMouseDownPassword}\r\n                    edge=\"end\"\r\n                  >\r\n                    {showPassword ? <Visibility /> : <VisibilityOff />}\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              }\r\n            /> */}\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item md={3} xs={12}>\r\n            <InputBase\r\n              className=\"base-input\"\r\n              value={t('WANETHERNET_PPPOE_SZSERVICENAME')} />\r\n          </Grid>\r\n\r\n          <Grid item md={6} xs={12}>\r\n            <TextField\r\n              hiddenLabel\r\n              id=\"szServiceName\"\r\n              value={cfg.szServiceName}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              onChange={(e) => this.setInputValue(e)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <div className=\"pageFooterContainer p-top-bottom-30\">\r\n          <div className=\"pageFooter\">\r\n            <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\r\n              onClick={() => this.onReset()}>\r\n              {t('CANCEL')}\r\n            </Button>\r\n            <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => this.onApply()}>\r\n              {t('APPLY')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst WANEthPPPoE = withTranslation()(WANEthPPPoEClass);\r\nexport default WANEthPPPoE;\r\n\r\n\r\n\r\n","D:\\Proscend\\sh-app\\src\\components\\wan\\wan_ethernet_dhcp.js",["106","107","108"],"import React, { Component } from 'react';\r\nimport AppContext from \"../../context/app-context\";\r\nimport { withTranslation } from 'react-i18next';\r\nimport {\r\n  Button, TextField, Select, InputBase, Grid\r\n} from '@material-ui/core';\r\nimport * as PAPI from \"../../utility/papi\";\r\n\r\nclass WANEthDhcpClass extends Component {\r\n  static contextType = AppContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cfg: {}\r\n    }    \r\n  }\r\n  \r\n  componentDidMount() {\r\n    let self = this;\r\n    let { cfgShowLoading } = this.context;\r\n    cfgShowLoading(true);\r\n    self.getData();\r\n  }\r\n\r\n  getData = () => {\r\n    let { cfgShowLoading } = this.context;\r\n    PAPI.PApiGet({ url: \"dns.cgi?act=config&index=6\" })\r\n      .then((data) => {\r\n        this.setState((prevState, props) => ({\r\n          cfg: data.config\r\n        }));        \r\n        setTimeout(() => {\r\n          cfgShowLoading(false);\r\n        }, 1000);\r\n      })\r\n      .catch((err) => {\r\n        cfgShowLoading(false);\r\n        console.log(err)\r\n      });\r\n  };\r\n\r\n  setInputValueNum = (e) => {\r\n    let obj = {\r\n      'dns4_from_0': 0,\r\n      'dns4_from_1': 1,\r\n      'dns4_from_2': 2\r\n    };\r\n    let cfg = { ...this.state.cfg };\r\n    cfg.dns4_from[obj[e.target.id]] = parseInt(e.target.value);\r\n    this.setState(() => ({\r\n      cfg\r\n    }));    \r\n  }\r\n\r\n  setInputValue = (e) => {\r\n    let obj = {\r\n      'dhcpc_dns4_addr_0': 0,\r\n      'dhcpc_dns4_addr_1': 1,\r\n      'dhcpc_dns4_addr_2': 2\r\n    }\r\n    let cfg = JSON.parse(JSON.stringify(this.state.cfg));\r\n    cfg.dns4_addr[obj[e.target.id]] = e.target.value;\r\n    this.setState((state, props) => ({\r\n      cfg\r\n    }));\r\n  }\r\n\r\n  onApply = () => {\r\n    let self = this;\r\n    let { cfgShowLoading } = this.context;\r\n    console.log(\"onApply cfg=\", JSON.stringify(this.state.cfg));\r\n    cfgShowLoading(true);\r\n    setTimeout(function () { self.getData(); }, 1000);\r\n  }\r\n\r\n  onReset = () => {\r\n    let self = this;\r\n    let { cfgShowLoading } = this.context;\r\n    cfgShowLoading(true);\r\n    setTimeout(function () { self.getData(); }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const { cfg } = this.state;\r\n\r\n    return (cfg && Object.keys(cfg).length === 0 && cfg.constructor === Object) ? \r\n    '':\r\n    (\r\n      <>\r\n        <div className=\"subTitle\">{t('WANDNS_LEGEND_DNS')}</div>\r\n\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item md={3} xs={12}>\r\n            <InputBase\r\n              className=\"base-input\"\r\n              value={t('WANDNS_IPV4_DNS_SERVER') + \" #1\"} />\r\n          </Grid>\r\n\r\n          <Grid item md={4} xs={12}>\r\n            {<Select\r\n              native\r\n              value={cfg.dns4_from[0].toString()}\r\n              onChange={(e) => this.setInputValueNum(e)}\r\n              fullWidth\r\n              inputProps={{\r\n                id: 'dns4_from_0'\r\n              }}\r\n            >\r\n              <option key=\"0\" value=\"0\">{t('WANDNS_DNS_SERVER_FROM_ISP')}</option>\r\n              <option key=\"1\" value=\"1\">{t('WANDNS_DNS_SERVER_USER_DEFINED')}</option>\r\n              <option key=\"2\" value=\"2\">{t('WANDNS_DNS_SERVER_NONE')}</option>\r\n\r\n            </Select>}\r\n          </Grid>\r\n\r\n          <Grid item md={4} xs={12}>\r\n            <TextField\r\n              hiddenLabel\r\n              id=\"dhcpc_dns4_addr_0\"\r\n              value={cfg.dns4_addr[0]}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              onChange={(e) => this.setInputValue(e)}\r\n              disabled={cfg.dns4_from[0] != 1}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item md={3} xs={12}>\r\n            <InputBase\r\n              className=\"base-input\"\r\n              value={t('WANDNS_IPV4_DNS_SERVER') + \" #2\"} />\r\n          </Grid>\r\n\r\n          <Grid item md={4} xs={12}>\r\n            {<Select\r\n              native\r\n              value={cfg.dns4_from[1].toString()}\r\n              onChange={(e) => this.setInputValueNum(e)}\r\n              fullWidth\r\n              inputProps={{\r\n                id: 'dns4_from_1'\r\n              }}\r\n            >\r\n              <option key=\"0\" value=\"0\">{t('WANDNS_DNS_SERVER_FROM_ISP')}</option>\r\n              <option key=\"1\" value=\"1\">{t('WANDNS_DNS_SERVER_USER_DEFINED')}</option>\r\n              <option key=\"2\" value=\"2\">{t('WANDNS_DNS_SERVER_NONE')}</option>\r\n\r\n            </Select>}\r\n          </Grid>\r\n\r\n          <Grid item md={4} xs={12}>\r\n            <TextField\r\n              hiddenLabel\r\n              id=\"dhcpc_dns4_addr_1\"\r\n              value={cfg.dns4_addr[1]}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              onChange={(e) => this.setInputValue(e)}\r\n              disabled={cfg.dns4_from[1] != 1}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container item xs={12} spacing={1}>\r\n          <Grid item md={3} xs={12}>\r\n            <InputBase\r\n              className=\"base-input\"\r\n              value={t('WANDNS_IPV4_DNS_SERVER') + \" #3\"} />\r\n          </Grid>\r\n\r\n          <Grid item md={4} xs={12}>\r\n            {<Select\r\n              native\r\n              value={cfg.dns4_from[2].toString()}\r\n              onChange={(e) => this.setInputValueNum(e)}\r\n              fullWidth\r\n              inputProps={{\r\n                id: 'dns4_from_2'\r\n              }}\r\n            >\r\n              <option key=\"0\" value=\"0\">{t('WANDNS_DNS_SERVER_FROM_ISP')}</option>\r\n              <option key=\"1\" value=\"1\">{t('WANDNS_DNS_SERVER_USER_DEFINED')}</option>\r\n              <option key=\"2\" value=\"2\">{t('WANDNS_DNS_SERVER_NONE')}</option>\r\n\r\n            </Select>}\r\n          </Grid>\r\n\r\n          <Grid item md={4} xs={12}>\r\n            <TextField\r\n              hiddenLabel\r\n              id=\"dhcpc_dns4_addr_2\"\r\n              value={cfg.dns4_addr[2]}\r\n              variant=\"filled\"\r\n              fullWidth\r\n              onChange={(e) => this.setInputValue(e)}\r\n              disabled={cfg.dns4_from[2] != 1}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <div className=\"pageFooterContainer p-top-bottom-30\">\r\n          <div className=\"pageFooter\">\r\n            <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\r\n              onClick={() => this.onReset()}>\r\n              {t('CANCEL')}\r\n            </Button>\r\n            <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => this.onApply()}>\r\n              {t('APPLY')}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst WANEthDhcp = withTranslation()(WANEthDhcpClass);\r\nexport default WANEthDhcp;\r\n\r\n\r\n\r\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":2,"column":13,"nodeType":"115","messageId":"116","endLine":2,"endColumn":17},{"ruleId":"113","severity":1,"message":"117","line":1,"column":16,"nodeType":"115","messageId":"116","endLine":1,"endColumn":24},{"ruleId":"113","severity":1,"message":"118","line":2,"column":8,"nodeType":"115","messageId":"116","endLine":2,"endColumn":23},{"ruleId":"113","severity":1,"message":"117","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":25},{"ruleId":"113","severity":1,"message":"119","line":23,"column":5,"nodeType":"115","messageId":"116","endLine":23,"endColumn":10},{"ruleId":"113","severity":1,"message":"120","line":24,"column":5,"nodeType":"115","messageId":"116","endLine":24,"endColumn":12},{"ruleId":"121","severity":1,"message":"122","line":34,"column":16,"nodeType":"123","messageId":"124","endLine":34,"endColumn":18},{"ruleId":"121","severity":1,"message":"122","line":51,"column":18,"nodeType":"123","messageId":"124","endLine":51,"endColumn":20},{"ruleId":"125","severity":1,"message":"126","line":29,"column":6,"nodeType":"127","endLine":29,"endColumn":8,"suggestions":"128"},{"ruleId":"113","severity":1,"message":"129","line":15,"column":10,"nodeType":"115","messageId":"116","endLine":15,"endColumn":20},{"ruleId":"125","severity":1,"message":"130","line":89,"column":6,"nodeType":"127","endLine":89,"endColumn":8,"suggestions":"131"},{"ruleId":"113","severity":1,"message":"132","line":69,"column":9,"nodeType":"115","messageId":"116","endLine":69,"endColumn":22},{"ruleId":"113","severity":1,"message":"133","line":70,"column":9,"nodeType":"115","messageId":"116","endLine":70,"endColumn":25},{"ruleId":"113","severity":1,"message":"134","line":72,"column":9,"nodeType":"115","messageId":"116","endLine":72,"endColumn":26},{"ruleId":"113","severity":1,"message":"135","line":136,"column":9,"nodeType":"115","messageId":"116","endLine":136,"endColumn":25},{"ruleId":"113","severity":1,"message":"136","line":10,"column":8,"nodeType":"115","messageId":"116","endLine":10,"endColumn":19},{"ruleId":"121","severity":1,"message":"137","line":125,"column":42,"nodeType":"123","messageId":"124","endLine":125,"endColumn":44},{"ruleId":"121","severity":1,"message":"137","line":162,"column":42,"nodeType":"123","messageId":"124","endLine":162,"endColumn":44},{"ruleId":"121","severity":1,"message":"137","line":199,"column":42,"nodeType":"123","messageId":"124","endLine":199,"endColumn":44},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'PAPI' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'LanguageContext' is defined but never used.","'Debug' is assigned a value but never used.","'Release' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cfgShowLoading'. Either include it or remove the dependency array.","ArrayExpression",["140"],"'withStyles' is defined but never used.","React Hook useEffect has missing dependencies: 'cfgShowLoading', 'cfgdata', and 'getData'. Either include them or remove the dependency array.",["141"],"'WAN_PROTO_OFF' is assigned a value but never used.","'WAN_PROTO_DHCPC6' is assigned a value but never used.","'WAN_PROTO_MGMT_RT' is assigned a value but never used.","'VLAN_SUBNET_NONE' is assigned a value but never used.","'FilledInput' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [cfgShowLoading]",{"range":"146","text":"147"},"Update the dependencies array to be: [cfgShowLoading, cfgdata, getData]",{"range":"148","text":"149"},[866,868],"[cfgShowLoading]",[2569,2571],"[cfgShowLoading, cfgdata, getData]"]