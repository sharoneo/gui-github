[{"D:\\gui_code\\sh-app\\src\\index.js":"1","D:\\gui_code\\sh-app\\src\\i18n.js":"2","D:\\gui_code\\sh-app\\src\\App.js":"3","D:\\gui_code\\sh-app\\src\\context\\language-context.js":"4","D:\\gui_code\\sh-app\\src\\context\\app-context.js":"5","D:\\gui_code\\sh-app\\src\\components\\Header.js":"6","D:\\gui_code\\sh-app\\src\\components\\Loading.js":"7","D:\\gui_code\\sh-app\\src\\components\\Main.js":"8","D:\\gui_code\\sh-app\\src\\components\\LanguageSwitcher.js":"9","D:\\gui_code\\sh-app\\src\\components\\Navbar.js":"10","D:\\gui_code\\sh-app\\src\\utility\\papi.js":"11","D:\\gui_code\\sh-app\\src\\components\\FileNode.js":"12","D:\\gui_code\\sh-app\\src\\router\\pageRouter.js":"13","D:\\gui_code\\sh-app\\src\\router\\index.js":"14","D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet.js":"15","D:\\gui_code\\sh-app\\src\\components\\wan\\connection_table.js":"16","D:\\gui_code\\sh-app\\src\\components\\dashboard\\Dashboard.js":"17","D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet_static.js":"18","D:\\gui_code\\sh-app\\src\\components\\wan\\connection_table_modal.js":"19","D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet_pppoe.js":"20","D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet_dhcp.js":"21"},{"size":344,"mtime":1613712591038,"results":"22","hashOfConfig":"23"},{"size":564,"mtime":1613531270088,"results":"24","hashOfConfig":"23"},{"size":1376,"mtime":1613698834192,"results":"25","hashOfConfig":"23"},{"size":810,"mtime":1612160266355,"results":"26","hashOfConfig":"23"},{"size":1115,"mtime":1613706240252,"results":"27","hashOfConfig":"23"},{"size":1404,"mtime":1613628725848,"results":"28","hashOfConfig":"23"},{"size":788,"mtime":1612872838126,"results":"29","hashOfConfig":"23"},{"size":4530,"mtime":1613706069152,"results":"30","hashOfConfig":"23"},{"size":1488,"mtime":1612794949376,"results":"31","hashOfConfig":"23"},{"size":878,"mtime":1613706099023,"results":"32","hashOfConfig":"23"},{"size":3430,"mtime":1613706789115,"results":"33","hashOfConfig":"23"},{"size":2207,"mtime":1613954651767,"results":"34","hashOfConfig":"23"},{"size":847,"mtime":1613721563374,"results":"35","hashOfConfig":"23"},{"size":2526,"mtime":1613531939169,"results":"36","hashOfConfig":"23"},{"size":4292,"mtime":1613615810500,"results":"37","hashOfConfig":"23"},{"size":12242,"mtime":1613698710255,"results":"38","hashOfConfig":"23"},{"size":13871,"mtime":1613530807772,"results":"39","hashOfConfig":"23"},{"size":7304,"mtime":1613695969177,"results":"40","hashOfConfig":"23"},{"size":9972,"mtime":1613698644773,"results":"41","hashOfConfig":"23"},{"size":5940,"mtime":1613955068855,"results":"42","hashOfConfig":"23"},{"size":7741,"mtime":1613954860173,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"8w1ku",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"46"},"D:\\gui_code\\sh-app\\src\\index.js",[],["98","99"],"D:\\gui_code\\sh-app\\src\\i18n.js",[],"D:\\gui_code\\sh-app\\src\\App.js",[],"D:\\gui_code\\sh-app\\src\\context\\language-context.js",[],"D:\\gui_code\\sh-app\\src\\context\\app-context.js",["100"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport * as PAPI from \"../utility/papi\";\r\nimport Menulist from \"../static/menu.json\";\r\n\r\n\r\nconst AppContext = createContext({\r\n  menulist:{},\r\n  showloading: true, \r\n  cfgShowLoading: ()=>{}\r\n});\r\n\r\nexport const AppContextProvider = ({ children })=> {\r\n  \r\n  //const [theme, setTheme] = useState('light');\r\n  const [showloading, setShowloading] = useState(true);\r\n  const [menulist, setMenulist] = useState({});\r\n  \r\n  // Method to update state\r\n  const cfgMenulist = () => {\r\n    setMenulist(Menulist);\r\n    /* PAPI.PApiGet({ url: \"menu.json\" })\r\n        .then((data) => {          \r\n          setMenulist(data);\r\n        })\r\n        .catch((err) => console.log(err));    */ \r\n  }\r\n\r\n  const cfgShowLoading = (isshow) => {\r\n    setShowloading(isshow);\r\n    console.log(\"isshow=\",isshow, showloading)\r\n  }  \r\n  \r\n\r\n  useEffect(() => {    \r\n    cfgMenulist();\r\n  }, []);\r\n\r\n  return (\r\n    <AppContext.Provider value={{ menulist, showloading, cfgShowLoading }}>\r\n       {children}\r\n    </AppContext.Provider>\r\n  )\r\n}\r\n\r\n\r\nexport default AppContext;","D:\\gui_code\\sh-app\\src\\components\\Header.js",["101","102"],"import React, { useState } from \"react\";\n// import { BrowserRouter } from \"react-router-dom\";\nimport { Grid } from '@material-ui/core';\nimport Navbar from \"./Navbar\";\n// import { useTranslation } from \"react-i18next\";\n// import LanguageContext from \"../context/language-context\";\nimport LanguageSwitcher from \"../components/LanguageSwitcher\";\n\n// const styles = theme => ({\n//   select: {\n//       '&:before': {\n//           borderColor: 'white',\n//       },\n//       '&:after': {\n//           borderColor: 'white',\n//       }\n//   },\n//   icon: {\n//       fill: 'white',\n//   },\n// });\n\n\n\nexport default function Header() {\n  /* const { i18n } = useTranslation();\n  const [language, setLanguage] = useState(\"en\");\n\n  const changeLang = (lang)=> {\n    setLanguage(lang);\n    i18n.changeLanguage(lang);\n  } */\n\n\n \n  \n\n  // const value = {language,setLanguage, changeLang};\n  let logo = \"./images/sh1.png\";\n  return (\n\n    <div className=\"header\">\n\n      <Grid container item\n        xs={12}\n        spacing={1}>\n\n        <Grid item\n          xs={3}>\n          <div className=\"logo\">\n            <img alt=\"Snow\"\n              src={logo}\n              width=\"65\"\n              height=\"65\" />\n          </div>\n        </Grid>\n\n        <Grid item\n          xs={9}>\n          <div className=\"logo float-right\">\n            <LanguageSwitcher />\n          </div>\n        </Grid>\n      </Grid>\n\n    </div>\n  );\n}\n","D:\\gui_code\\sh-app\\src\\components\\Loading.js",["103","104"],"import React, {useState, useContext} from \"react\";\nimport LanguageContext from \"../context/language-context\";\nimport AppContext from \"../context/app-context\";\n\nconst Loading = () => {\n  let { showloading } = useContext(AppContext);\n  //const [showLoading, setshowLoading] = useState(true)\n\n  return (\n    <> \n      {showloading ? (\n        <div className='loading-Container'>\n          <div className='loader'>\n            <div className='loader--dot'></div>\n            <div className='loader--dot'></div>\n            <div className='loader--dot'></div>\n            <div className='loader--dot'></div>\n            <div className='loader--dot'></div>\n            <div className='loader--dot'></div>\n          </div>\n        </div>) : null\n      }\n    </>\n  );\n};\n\nexport default Loading;\n","D:\\gui_code\\sh-app\\src\\components\\Main.js",[],"D:\\gui_code\\sh-app\\src\\components\\LanguageSwitcher.js",[],"D:\\gui_code\\sh-app\\src\\components\\Navbar.js",[],"D:\\gui_code\\sh-app\\src\\utility\\papi.js",["105","106","107"],"import axios from 'axios';\r\n\r\nvar guiObj = [\r\n  //Demo(Mockdata)\r\n  {\r\n    cgi: \"./mockconfig/\",\r\n    baseurl: \"\"\r\n    //baseurl: \"http://localhost:3000\"\r\n  },\r\n  //Debug (CROS)\r\n  {\r\n    cgi: \"/cgi-bin/\",\r\n    baseurl: \"http://192.168.1.35\"\r\n  },\r\n  //Release\r\n  {\r\n    cgi: \"/cgi-bin/\",\r\n    baseurl: \"\"\r\n  }\r\n];\r\n\r\nvar Demo = 0; //mockdata\r\nvar Debug = 1; //CROS\r\nvar Release = 2; \r\n\r\n//###\r\nvar GUI_Flag = Demo;\r\n\r\nvar cgi = guiObj[GUI_Flag].cgi;\r\nvar baseurl = guiObj[GUI_Flag].baseurl;\r\n\r\nexport const PApiGet = async (obj) => {\r\n  \r\n  let objurl = obj.url;\r\n  if(GUI_Flag == Demo) {\r\n    if((obj.url).indexOf('?') >= 0) {\r\n      objurl = (obj.url).split('?').join('_');\r\n    }\r\n  }  \r\n  \r\n  let url = baseurl + cgi + objurl;\r\n  console.log(\"GUI_Flag=\", GUI_Flag,\"   /  objurl = \",url);\r\n  const response = await axios.get(url);\r\n  return response.data;\r\n\r\n  // try {\r\n  //   const res = await fetch(url, {\r\n  //                 headers: {\r\n  //                     'Content-Type': 'application/json',\r\n  //                     'Accept': 'application/json'\r\n  //                 }\r\n  //             });\r\n  //   if (res){\r\n  //     const resp = await res.json();\r\n  //     return resp;\r\n  //   }\r\n  // }\r\n  // catch (e){\r\n  //   console.log('Fail:', e);\r\n  // }\r\n\r\n  // return null;\r\n\r\n\r\n}\r\n\r\n// export const PApiGetAll = async (objArr) => {\r\n//   console.log(\"papi_get  obj = \",objArr);\r\n//   //let url = cgi + obj.url;\r\n//   let url = \"\";\r\n//   let axiosfunArr = [];\r\n//   // objArr.map((item) =>{\r\n//   //     url = cgi + item.url;\r\n//   //     let func = function() {\r\n//   //       return axios.get(url);\r\n//   //     };\r\n//   //     axiosfunArr.push(func);\r\n//   //   }    \r\n//   // );\r\n    \r\n//   // const response = await axios.get(url);\r\n//   // return response.data\r\n//   function funcA() {\r\n//     return axios.get(cgi+\"connection_table.cgi_act=config\");\r\n//   }\r\n//   function funcB() {\r\n//     return axios.get(cgi+\"connmgr.cgi_act=ping_health_config\");\r\n//   }\r\n\r\n//   const response = await axios.all([funcA(), funcB()]);\r\n//   return response.data\r\n  // axios.all([funcA(), funcB()])\r\n  //   .then(axios.spread((acct, perms) => {\r\n  //     // axios 回傳的資料在 data 屬性\r\n  //     console.table('FuncA 回傳結果', acct.data)\r\n  //     // fetch 資料可以先在 function 內作 json()\r\n  //     console.table('FuncB 回傳結果', perms)\r\n  //   }))\r\n  //   .catch((err) => { console.error(err) })\r\n    \r\n  // try {\r\n  //   const res = await fetch(url, {\r\n  //                 headers: {\r\n  //                     'Content-Type': 'application/json',\r\n  //                     'Accept': 'application/json'\r\n  //                 }\r\n  //             });\r\n  //   if (res){\r\n  //     const resp = await res.json();\r\n  //     return resp;\r\n  //   }\r\n  // }\r\n  // catch (e){\r\n  //   console.log('Fail:', e);\r\n  // }\r\n\r\n  // return null;\r\n\r\n\r\n//}\r\n\r\n// export const PApiGet = async (obj) => {\r\n//   //console.log(\"papi_get  obj = \",obj);\r\n//   let url = cgi + obj.url;\r\n//   try {\r\n//     const res = await fetch(url, {\r\n//                   headers: {\r\n//                       'Content-Type': 'application/json',\r\n//                       'Accept': 'application/json'\r\n//                   }\r\n//               });\r\n//     if (res){\r\n//       const resp = await res.json();\r\n//       return resp;\r\n//     }\r\n//   }\r\n//   catch (e){\r\n//     console.log('Fail:', e);\r\n//   }\r\n\r\n//   return null;\r\n\r\n\r\n// }","D:\\gui_code\\sh-app\\src\\components\\FileNode.js",["108","109","110","111","112"],"import React, { Component } from 'react';\r\n// import { NavLink, Route, Switch, useRouteMatch } from \"react-router-dom\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport FolderOpenIcon from '@material-ui/icons/FolderOpen';\r\nimport FolderIcon from '@material-ui/icons/Folder';\r\nimport DescriptionIcon from '@material-ui/icons/Description';\r\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\r\nimport RemoveOutlinedIcon from '@material-ui/icons/RemoveOutlined';\r\nimport StarIcon from '@material-ui/icons/Star';\r\nimport GradeIcon from '@material-ui/icons/Grade';\r\n//import Menu from '@material-ui/core/Menu';\r\n//import MenuItem from '@material-ui/core/MenuItem';\r\n\r\nclass FileNode extends Component {\r\n  state = {\r\n    open: false,\r\n  };\r\n  toggle = () => {\r\n    this.setState({\r\n      open: !this.state.open,\r\n    });\r\n  };\r\n  render() {\r\n    // const { title, submenu } = this.props;\r\n    const { id, linkto, title, submenu, leaf, url} = this.props;\r\n    console.log(\"=sh= FileNode url = \",url, id);\r\n    const { open } = this.state;    \r\n\r\n    if (!submenu) {\r\n      // return {title};\r\n      // return (\r\n      //   <li key={id}>\r\n      //     <NavLink exact to={`${url}/${linkto}`}>{title}</NavLink>\r\n      //   </li>\r\n      // ) \r\n      if (leaf) {\r\n        return (\r\n          <li key={id}>\r\n            <NavLink exact className=\"tree-file\" to={`${url}${linkto}`}><RemoveOutlinedIcon style={{fontSize: \"small\"}} />&nbsp;{title}</NavLink>         \r\n          </li>    \r\n        )\r\n        \r\n      }\r\n      else {\r\n        return (<li key={id}>\r\n          {title}\r\n          </li>);\r\n      }\r\n      \r\n    // return <li>{title}-{leaf?1:0}</li>;\r\n    }\r\n    else {\r\n      return (\r\n        <li className=\"section\">        \r\n          <div className={`tree-foler ${open ? 'open' : ''}`} onClick={this.toggle}>\r\n          <KeyboardArrowRightIcon />&nbsp;{title}\r\n          </div>\r\n          {!open ? null : (\r\n            <ul>\r\n              {submenu.map((item) => (\r\n                <FileNode url={url} {...item} key={item.id} />\r\n              ))}\r\n            </ul>\r\n          )}\r\n         {/* </div> */}\r\n        </li>\r\n      );\r\n    }    \r\n  }\r\n}\r\n\r\nexport default FileNode;\r\n","D:\\gui_code\\sh-app\\src\\router\\pageRouter.js",[],"D:\\gui_code\\sh-app\\src\\router\\index.js",[],["113","114"],"D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet.js",["115","116","117","118","119","120","121","122","123","124","125","126","127","128","129"],"import React, { useState, useEffect } from \"react\";\nimport { useTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport {\n  Container, Typography,\n  Button, IconButton, TextField, Select, InputBase,\n  Paper, Grid, Tabs, Tab, Box\n} from '@material-ui/core';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport * as PAPI from \"../../utility/papi\";\n\nimport DhcpWin from \"./wan_ethernet_dhcp.js\";\nimport PPPoEWin from \"./wan_ethernet_pppoe.js\";\nimport StaticWin from \"./wan_ethernet_static.js\";\n\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\n\nconst WanEthernet = () => {\n  const { t } = useTranslation();\n  const [value, setValue] = React.useState(0);\n\n  const [wanst, setWanst] = useState();\n  const [pppoe, setPppoe] = useState();\n\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 700,\n    },\n  });\n  const classes = useStyles();\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const getData = async () => {\n    await PAPI.PApiGet({ url: \"wanst.cgi?act=config\" })\n      .then((data) => {\n        console.log(\"config data\", JSON.stringify(data));\n        setWanst(data);\n      })\n      .catch((err) => console.log(err));\n\n    await PAPI.PApiGet({ url: \"pppoe.cgi?act=config\" })\n      .then((data) => {\n        console.log(\"config data\", JSON.stringify(data));\n        setPppoe(data);\n      })\n      .catch((err) => console.log(err));\n\n    // PAPI.PApiGetAll(objdata)\n    //   .then((data) => {\n    //     console.log(\"config data\", JSON.stringify(data));\n    //     setStatus(data);\n    //   })\n    //   .catch((err) => console.log(err));\n\n    //   axios.all([funcA(), funcB()])\n    // .then(axios.spread((acct, perms) => {\n    //   // axios 回傳的資料在 data 屬性\n    //   console.table('FuncA 回傳結果', acct.data)\n    //   // fetch 資料可以先在 function 內作 json()\n    //   console.table('FuncB 回傳結果', perms)\n    // }))\n    // .catch((err) => { console.error(err) })\n\n    // function funcA() {\n    //   return axios.get('http://localhost:3000/users/1')\n    // }\n\n\n\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function setInputValue(e) {\n    /* console.log(\"setInputValue target =\", e.target.id,e.target.value);\n    let prof = \"CONN_PROF_\" + cfgdata.act_prof; \n    setCfgdata({\n      ...cfgdata,\n      [prof]: {\n        [e.target.id]: e.target.value\n      } \n    }); */\n  }\n\n  function onApply() {\n    /* console.log(\"onApply (cfgdata)=\", JSON.stringify(cfgdata));\n    setData();     */\n  }\n\n  function onReset() {\n    /* console.log(\"onReset=\", JSON.stringify(cfgdata));\n    getData();   */\n  }\n\n  return (\n    <>\n      <div className=\"pageMain\">\n\n        {/* <div className=\"pageMain\"> */}\n\n        <Typography variant=\"h6\" gutterBottom color=\"primary\" className=\"m-bottom-20\">\n          {t('MENU_WAN_ETHERNET')}\n        </Typography>\n        <Tabs value={value} onChange={handleChange} aria-label=\"ethernet tabs\">\n          <Tab label={t('WANETHERNET_WORKAS_DHCP')} {...a11yProps(0)} />\n          <Tab label={t('WANETHERNET_WORKAS_PPPOE')} {...a11yProps(1)} />\n          <Tab label={t('WANETHERNET_WORKAS_STATIC')} {...a11yProps(2)} />\n        </Tabs>\n\n        \n        <TabPanel value={value} index={0}>\n              <DhcpWin   />\n            </TabPanel>            \n            <TabPanel value={value} index={1}>\n              <PPPoEWin />\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n              <StaticWin />\n            </TabPanel>\n       \n      </div>\n\n    </>\n  );\n};\n\nexport default WanEthernet;\n","D:\\gui_code\\sh-app\\src\\components\\wan\\connection_table.js",["130","131","132","133","134","135","136"],"import React, { useState, useEffect, useContext } from \"react\";\nimport AppContext from \"../../context/app-context\";\nimport { useTranslation } from 'react-i18next';\nimport * as PAPI from \"../../utility/papi\";\n\nimport EditWin from \"./connection_table_modal.js\";\n\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport {\n  Container,\n  Button, IconButton, TextField, Select, InputBase,\n  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography,\n  Paper, Grid\n} from '@material-ui/core';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\n\n// import '../../css/styles.css';\n\nconst ConnectionTable = () => {\n  const { cfgShowLoading } = useContext(AppContext);\n  const { t } = useTranslation();\n  const dfEditCfg = {\n    idx: -1,\n    cfg: {}\n  };\n\n  const dfCfgdata = {\n    act_prof: 1,\n    wan_port_as: \"\",\n    prof_num: 3,\n    CONN_PROF_1: {\n      profile_name: \"\"\n    },\n    CONN_PROF_2: {\n      profile_name: \"\"\n    },\n    CONN_PROF_3: {\n      profile_name: \"\"\n    }\n  };\n\n  const [cfgdata, setCfgdata] = useState(dfCfgdata);\n  /* const [connProf, setConnProf] = useState({\n    profile_name: \"\"\n  }); */\n  const [showModal, setShowModal] = useState(false);\n  const [editCfg, setEditCfg] = useState(dfEditCfg);\n  const [pfNum, setPfNum] = useState([]);\n\n  const getData = () => {\n    PAPI.PApiGet({ url: \"connection_table.cgi?act=config\" })\n      .then((data) => {\n      console.log(\"config data====\", JSON.stringify(data));  \n        //let prof = \"CONN_PROF_\" + data.config.act_prof;\n        //setConnProf(data.config[prof]);\n        setCfgdata(data.config);\n        cfgShowLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        cfgShowLoading(false);\n      });\n  };\n\n  const setData = () => {\n    console.log(\"setData\", JSON.stringify(cfgdata));\n    PAPI.PApiGet({ url: \"connection_table.cgi?act=config\" })\n      .then((data) => {\n        //console.log(\"config data\", JSON.stringify(data));  \n        //let prof = \"CONN_PROF_\" + data.config.act_prof;\n        //setConnProf(data.config[prof]);\n        setCfgdata(data.config);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  useEffect(() => {\n    console.log(\"=sh= useEffect cfgdata.prof_num=\", JSON.stringify(cfgdata));\n    let pfArr = new Array();\n    pfArr.length = cfgdata.prof_num;\n    setPfNum(() => [...pfArr]);\n  }, [cfgdata[\"prof_num\"]]);\n\n  useEffect(() => {\n    console.log(\"=sh= useEffect cfgdata=\", JSON.stringify(cfgdata));\n  }, [cfgdata]);\n\n  /* useEffect(() => {\n    console.log(\"=sh= connProf\", JSON.stringify(connProf));\n    setEditCfg(dfEditCfg);\n    setShowModal(false);\n  }, [connProf]); */\n\n  useEffect(() => {\n    console.log(\"=sh= entryEdit useEffect editCfg=\", JSON.stringify(editCfg));\n    if (Object.keys(editCfg).length > 0 && editCfg.idx >= 0) {\n      setShowModal(true);\n    }\n  }, [editCfg]);\n\n  useEffect(() => {\n    cfgShowLoading(true);\n    setTimeout(() => {\n      getData();\n    }, 1000);\n    //getData();\n  }, []);\n\n\n\n  function onModalApply(edCfg) {\n    //console.log(\"onModalApply=\", JSON.stringify(edCfg));\n    //let applycfg = JSON.parse(JSON.stringify(cfgdata));\n    let applycfg = { ...connProf };\n    console.log(\"onModalApply applycfg(1)=\", JSON.stringify(applycfg));\n    applycfg[\"profile_list\"][edCfg.idx] = edCfg.cfg;\n    console.log(\"onModalApply applycfg(2)=\", JSON.stringify(applycfg));\n    //setConnProf(applycfg);\n    setShowModal(false);\n  }\n\n  function onModalCancel() {\n    setShowModal(false);\n\n  }\n\n  function entryEdit(idx) {\n    let cfg = JSON.parse(JSON.stringify(connProf[\"profile_list\"][idx]));\n    console.log(\"=sh= entryEdit idx=\", idx, JSON.stringify(cfg));\n    setEditCfg({ idx, cfg });\n    //console.log(\"=sh= entryEdit editCfg=\", editCfg);\n    //setShowModal(true);\n  }\n\n  function entryDelete(idx) {\n    //let cfg = JSON.parse(JSON.stringify(connProf[\"profile_list\"][idx]));\n    let cfg = JSON.parse(JSON.stringify(cfgdata));\n    let prof = \"CONN_PROF_\" + cfg.act_prof;\n    let connProf = cfg[prof];\n    console.log(\"=sh= entryDelete idx=\", idx,connProf);\n    connProf[\"profile_list\"].splice(idx, 1);\n    //setEditCfg({idx, cfg});\n    console.log(\"=sh= entryDelete cfg=\", JSON.stringify(cfg));\n    setCfgdata({...cfg});\n    //setShowModal(true);\n  }\n\n  function onApply() {\n    console.log(\"onApply (cfgdata)=\", JSON.stringify(cfgdata));\n    setData();\n    /* let applycfg = { ...connProf };\n    applycfg[\"profile_list\"][edCfg.idx] = edCfg.cfg;\n    console.log(\"onModalApply applycfg(2)=\", JSON.stringify(applycfg));\n    setConnProf(applycfg); */\n  }\n\n  function onReset() {\n    console.log(\"onReset=\", JSON.stringify(cfgdata));\n    cfgShowLoading(true);\n    setTimeout(function () { getData(); }, 3000);\n    //getData();\n\n  }\n\n\n  // const StyledTableCell = withStyles((theme) => ({\n  //   head: {\n  //     backgroundColor: theme.palette.common.black,\n  //     color: theme.palette.common.white,\n  //   },\n  //   body: {\n  //     fontSize: 14,\n  //   },\n  // }))(TableCell);\n\n  // const StyledTableRow = withStyles((theme) => ({\n  //   root: {\n  //     '&:nth-of-type(odd)': {\n  //       backgroundColor: theme.palette.action.hover,\n  //     },\n  //   },\n  // }))(TableRow);\n\n\n  const handleChangeProfile = (e) => {\n    const act_prof = e.target.value;\n    //let prof = \"CONN_PROF_\" + act_prof;\n    setCfgdata({\n      ...cfgdata,\n      act_prof: e.target.value\n    });\n    //setConnProf({...cfgdata[prof]});\n  };\n\n  function setInputValue(e) {\n    console.log(\"setInputValue target =\", e.target.id, e.target.value);\n    //const val = e.target.value;\n    let prof = \"CONN_PROF_\" + cfgdata.act_prof;\n    setCfgdata({\n      ...cfgdata,\n      [prof]: {\n        [e.target.id]: e.target.value\n      }\n    });\n    /* setConnProf({\n      ...cfgdata[prof], \n      profile_name: e.target.value\n    }); */\n\n  }\n\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 700,\n    },\n  });\n  const classes = useStyles();\n  let prof = \"CONN_PROF_\" + cfgdata.act_prof;\n  let connProf = cfgdata[prof];\n  console.log(\"connProfXX =\", JSON.stringify(connProf));\n  return (\n    <>\n      <div className=\"pageContainer\">\n        <div className=\"pageMainContainer\">\n          <div className=\"pageMain\">\n            {/* title */}\n            <Typography variant=\"h6\" gutterBottom color=\"primary\" className=\"m-bottom-20\">\n              {t('CONN_TBL_TITLE')}\n            </Typography>\n\n            {/* config */}\n            <Grid container spacing={1}>\n              <Grid container item xs={12} spacing={1}>\n                <Grid item md={3} xs={12}>\n                  <InputBase\n                    className=\"base-input\"\n                    value={t('PROFILE')} />\n                </Grid>\n                <Grid item md={5} xs={12}>\n                  {<Select\n                    native\n                    value={cfgdata.act_prof} \n                    onChange={handleChangeProfile}\n                    fullWidth\n                    variant=\"filled\"\n                    inputProps={{\n                      name: 'act_prof',\n                      id: 'act_prof'\n                    }}\n                  >\n                    {pfNum.map(\n                      (item, idx) => {\n                        return (<option key={idx} value={idx + 1}>{idx + 1}</option>)\n                      }\n                    )}\n                  </Select>}\n                </Grid>\n              </Grid>\n\n\n              <Grid container item xs={12} spacing={1} my={5}>\n\n                <Grid item md={3} xs={12}>\n                  <InputBase\n                    className=\"base-input\"\n                    value={t('NAME')} />\n                </Grid>\n                <Grid item md={5} xs={12}>\n                  <TextField\n                    hiddenLabel\n                    id=\"profile_name\"\n                    value={connProf.profile_name}\n                    variant=\"filled\"\n                    fullWidth\n                    onChange={(e) => setInputValue(e)}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid container item xs={12} spacing={1} my={5}>\n                <Grid item md={3} xs={12}>\n                  <InputBase\n                    className=\"base-input\"\n                    value={t('WAN_PORT_AS')}\n                  />\n                </Grid>\n                <Grid item md={5} xs={12}>\n                  <TextField\n                    id=\"wan_work_as-text\"\n                    value={cfgdata.wan_port_as}\n                    fullWidth\n                    className=\"base-input\"\n                    InputProps={{\n                      readOnly: true,\n                      disableUnderline: true\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n\n\n            {/* table */}\n            <div className=\"p-top-bottom-30\"></div>\n            <TableContainer component={Paper}>\n              <Table className={classes.table} aria-label=\"customized table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>#</TableCell>\n                    <TableCell align=\"center\">{t('PRIORITY')}</TableCell>\n                    <TableCell align=\"center\">{t('ECMP_WEIGHT')}</TableCell>\n                    <TableCell align=\"center\">{t('INTERFACE')}</TableCell>\n                    <TableCell align=\"center\">{t('PROTOCOL')}</TableCell>\n                    <TableCell align=\"center\">{t('SVCPORT_ENTRY_ACTION')}</TableCell>\n                    {/* <StyledTableCell>Dessert (100g serving)</StyledTableCell>\n            <StyledTableCell align=\"right\">Calories</StyledTableCell>\n            <StyledTableCell align=\"right\">Fat&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Carbs&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Protein&nbsp;(g)</StyledTableCell>\n            <StyledTableCell align=\"right\">Test</StyledTableCell> */}\n                  </TableRow>\n                </TableHead>\n                {/* <TableBody> */}\n                {!connProf[\"profile_list\"] ?\n                  (<TableBody><TableRow><TableCell></TableCell></TableRow></TableBody>) : (\n                    <TableBody>\n                      {connProf[\"profile_list\"].map((item, idx) => (\n                        <TableRow key={idx}>\n                          <TableCell component=\"th\" scope=\"row\">\n                            {idx + 1}\n                          </TableCell>\n                          <TableCell align=\"center\">{item.prio}</TableCell>\n                          <TableCell align=\"center\">{item[\"ecmp_weight\"]}</TableCell>\n                          <TableCell align=\"center\">{item[\"iface_id\"]}</TableCell>\n                          <TableCell align=\"center\">{item.proto6}</TableCell>\n                          <TableCell align=\"center\">\n                            <IconButton onClick={() => entryEdit(idx)}>\n                              <EditIcon />\n                            </IconButton>\n                          &nbsp;&nbsp;\n                          <IconButton onClick={() => entryDelete(idx)}>\n                              <DeleteForeverIcon />\n                            </IconButton>\n\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  )\n                }\n                {/* </TableBody> */}\n              </Table>\n            </TableContainer>\n          </div>\n        </div>\n\n        <div className=\"pageFooterContainer\">\n          <div className=\"pageFooter\">\n            <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\n              onClick={() => onReset()}>\n              {t('CANCEL')}\n            </Button>\n            <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => onApply()}>\n              {t('APPLY')}\n            </Button>\n          </div>\n        </div>\n      </div>\n      {!showModal ? '' : (<EditWin\n        visible={showModal}\n        title=\"Test Modal\"\n        onModalApply={(data) => { onModalApply(data); }}\n        onModalCancel={() => { onModalCancel(); }}\n        editCfg={editCfg}\n      >\n      </EditWin>)}\n    </>\n  );\n};\n\nexport default ConnectionTable;\n","D:\\gui_code\\sh-app\\src\\components\\dashboard\\Dashboard.js",["137","138","139","140","141"],"import React, { useState, useEffect, useContext } from \"react\";\nimport AppContext from \"../../context/app-context\";\nimport { useTranslation } from \"react-i18next\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Container,\n  Card,\n  CardContent,\n  Grid,\n  Typography,\n} from \"@material-ui/core\";\nimport * as PAPI from \"../../utility/papi\";\n\nexport default function Dashboard() {\n  const { cfgShowLoading } = useContext(AppContext);\n  const { t } = useTranslation();\n  //const classes = useStyles();\n  //const bull = <span className={classes.bullet}>•</span>;\n  const [status, setStatus] = useState({});\n\n  useEffect(() => {\n    cfgShowLoading(true);\n    const getData = () => {\n      PAPI.PApiGet({ url: \"status.cgi?act=status\" })\n        .then((data) => {\n          console.log(\"config data\", JSON.stringify(data));\n          setStatus(data.status);\n        })\n        .catch((err) => console.log(err));\n    };\n    getData();\n    setTimeout(function () {\n      cfgShowLoading(false);\n    }, 1000);\n  }, []);\n\n  return (status.modem0) ? (\n    <div className=\"m-bottom-20\">\n      <Typography\n        variant=\"h6\"\n        gutterBottom\n        color=\"primary\"\n        className=\"m-bottom-20\"\n      >\n        {t(\"MENU_STATUS\")}\n      </Typography>\n\n      <Grid container item xs={12} spacing={2}>\n        <Grid item md={6} xs={12}>\n          <div className=\"card card-pink\">\n            <div className=\"card-header card-header-pink\">{t('STATUS_PANEL_TITLE_SIM1')}</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_MODEM_SIM_STATUS')}</div>\n              <div className=\"main-description\">{status.modem0.modem_sim_status}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_MODEM_OPERATOR_NAME')}</div>\n              <div className=\"main-description\">{status[\"modem0\"].modem_operator_name}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_MODEM_SIM_IMSI')}</div>\n              <div className=\"main-description\">{status.modem0.modem_sim_imsi}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_MODEM_SIM_IMEI')}</div>\n              <div className=\"main-description\">{status.modem0.modem_sim_imei}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_PHONE_NUMBER')}</div>\n              <div className=\"main-description\">{status.modem0.phone_number}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\n              <div className=\"main-description\">{status.lte_dpip0.ipinfo.ipRmt}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\n              <div className=\"main-description\">{status.lte_dpip0.ipinfo.ipMask}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_DEFAULT_GATEWAY')}</div>\n              <div className=\"main-description\">{status.lte_dpip0.ipinfo.default_gw}</div>\n            </div>            \n          </div>          \n        </Grid>\n\n        <Grid item md={6} xs={12}>\n        <div className=\"card card-yellow\">\n            <div className=\"card-header card-header-yellow\">{t('STATUS_PANEL_TITLE_WAN_ETH')}</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\n              <div className=\"main-description\">{status.eth_proto4.ipRmt}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\n              <div className=\"main-description\">{status.eth_proto4.ipMask}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_DEFAULT_GATEWAY')}</div>\n              <div className=\"main-description\">{status.eth_proto4.default_gw}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #1</div>\n              <div className=\"main-description\">{status.eth_proto4.dns4_1}</div>\n            </div>\n            <div className=\"card-main\">              \n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #2</div>\n              <div className=\"main-description\">{status.eth_proto4.dns4_2}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #3</div>\n              <div className=\"main-description\">{status.eth_proto4.dns4_3}</div>\n            </div>\n            <div className=\"card-main\">              \n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n          </div>          \n        </Grid>\n\n        <Grid item md={6} xs={12}>\n        <div className=\"card card-blue\">\n            <div className=\"card-header card-header-blue\">{t('STATUS_PANEL_TITLE_WAN_WIFI')}</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\n              <div className=\"main-description\">{status.wan_wifi_proto4.ipRmt}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\n              <div className=\"main-description\">{status.wan_wifi_proto4.ipRmt}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_DEFAULT_GATEWAY')}</div>\n              <div className=\"main-description\">{status.wan_wifi_proto4.ipMask}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #1</div>\n              <div className=\"main-description\">{status.wan_wifi_proto4.dns4_1}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #2</div>\n              <div className=\"main-description\">{status.wan_wifi_proto4.dns4_2}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV4_DNS_SERVER')} #3</div>\n              <div className=\"main-description\">{status.wan_wifi_proto4.dns4_3}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_WIFI_SSID')}</div>\n              <div className=\"main-description\">{status.wan_wifi.wan_wifi_ssid}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_WIFI_CHANNEL')}</div>\n              <div className=\"main-description\">{status.wan_wifi.wan_wifi_channel}</div>\n            </div>\n          </div>          \n        </Grid>\n\n        <Grid item md={6} xs={12}>\n        <div className=\"card card-green\">\n            <div className=\"card-header card-header-green\">{t('STATUS_PANEL_TITLE_LAN_ETH')}</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_ADDR')}</div>\n              <div className=\"main-description\">{status.lan_status.addr}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV4_MASK')}</div>\n              <div className=\"main-description\">{status.lan_status.mask}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV6_ADDR')}</div>\n              <div className=\"main-description\">{status.current_lte_proto6.addr6_lan}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('STATUS_IPV6_MASK')}</div>\n              <div className=\"main-description\">{status.current_lte_proto6.plen_lan}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV6_DNS_SERVER')} #1</div>\n              <div className=\"main-description\">{status.lan_status.dns6_1}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV6_DNS_SERVER')} #2</div>\n              <div className=\"main-description\">{status.lan_status.dns6_2}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">{t('WANDNS_IPV6_DNS_SERVER')} #3</div>\n              <div className=\"main-description\">{status.lan_status.dns6_3}</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n          </div>          \n        </Grid>\n\n        {/* <Grid item md={6} xs={12}>\n        <div className=\"card card-yellow\">\n            <div className=\"card-header card-header-yellow\">Night</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">              \n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n          </div>          \n        </Grid>\n\n        <Grid item md={6} xs={12}>\n        <div className=\"card card-yellow\">\n            <div className=\"card-header card-header-yellow\">Night</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n          </div>          \n        </Grid>\n\n        <Grid item md={6} xs={12}>\n        <div className=\"card card-green\">\n            <div className=\"card-header card-header-green\">Night</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">              \n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n          </div>          \n        </Grid>\n\n        <Grid item md={6} xs={12}>\n        <div className=\"card card-green\">\n            <div className=\"card-header card-header-green\">Night</div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\">Hot Tub</div>\n              <div className=\"main-description\">description</div>\n            </div>\n            <div className=\"card-main\">              \n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n            <div className=\"card-main\">\n              <div className=\"main-title\"></div>\n              <div className=\"main-description\"></div>\n            </div>\n          </div>          \n        </Grid> */}\n      </Grid>\n    </div>\n  ) : '';\n}\n\n//export default Dashboard;\n","D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet_static.js",[],"D:\\gui_code\\sh-app\\src\\components\\wan\\connection_table_modal.js",["142","143","144","145"],"import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/PROSModal.css';\r\nimport { withTranslation } from 'react-i18next';\r\nimport {\r\n  Button, IconButton, TextField, Select, InputBase, Grid\r\n} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\n\r\nclass PROSModalClass extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      dataCfg: this.props.editCfg\r\n    };\r\n    console.log(\"=sh= dataCfg=\", JSON.stringify(this.state.dataCfg));\r\n  }\r\n\r\n  static propTypes = {\r\n    visible: PropTypes.bool,\r\n    title: PropTypes.string,\r\n    onModalApply: PropTypes.func,\r\n    onModalCancel: PropTypes.func,\r\n    editCfg: PropTypes.object\r\n  }\r\n  static defaultProps = {\r\n    visible: true,\r\n    title: '',\r\n    onModalApply: () => { },\r\n    onModalCancel: () => { },\r\n    editCfg: {}\r\n  }\r\n\r\n  setInputValueNum(e) {\r\n    console.log(\"setInputValueNum target id =\", e.target.id);\r\n    let dataObj = { ...this.state.dataCfg };\r\n    dataObj.cfg[e.target.id] = parseInt(e.target.value);\r\n    this.setState({ ...dataObj });\r\n    //console.log(\"setInputValueNum=\",JSON.stringify(dataObj));\r\n  }\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const {\r\n      visible,\r\n      title,\r\n      onModalApply,\r\n      onModalCancel\r\n    } = this.props,\r\n      show = {\r\n        zIndex: 2000,\r\n        opacity: 1\r\n      },\r\n      hide = {\r\n        zIndex: -1,\r\n        opacity: 0\r\n      },\r\n      contShow = {\r\n        width: '70%',\r\n      },\r\n      contHide = {\r\n        width: '0px',\r\n        height: '0px'\r\n      };\r\n\r\n    let { dataCfg } = this.state;\r\n    //let { ifcObjArr } = this.state.pageData;\r\n    let WAN_PROTO_OFF = 0x01;\r\n    let WAN_PROTO_DHCPC6 = 0x02;\r\n    let WAN_PROTO_BRIDGE = 0x04;\r\n    let WAN_PROTO_MGMT_RT = 0x08;\r\n    let WAN_PROTO_WIFI = 0x10;\r\n    let WAN_PROTO_DHCPC4 = 0x20;\r\n    let WAN_PROTO_STATIC_IP4 = 0x40;\r\n    let WAN_PROTO_PPPOE4 = 0x80;\r\n    let ptlObj = {\r\n      \"ETHNET\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_PPPOE4,\r\n        \"label\": \"PPPOE_CLIENT\"\r\n      }, {\r\n        \"val\": WAN_PROTO_STATIC_IP4,\r\n        \"label\": \"STATIC_IPV4\"\r\n      }, {\r\n        \"val\": WAN_PROTO_DHCPC4,\r\n        \"label\": \"DHCP_V4\"\r\n      }],\r\n      \"WIFI\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_WIFI,\r\n        \"label\": \"WIFI\"\r\n      }],\r\n      \"MOBILE_APN\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_DHCPC4,\r\n        \"label\": \"DHCP_V4\"\r\n      }],\r\n      \"MOBILE_APN2\": [{\r\n        \"val\": WAN_PROTO_BRIDGE,\r\n        \"label\": \"BRIDGE\"\r\n      }, {\r\n        \"val\": WAN_PROTO_DHCPC4,\r\n        \"label\": \"DHCP_V4\"\r\n      }]\r\n    };\r\n\r\n    let ifcObjArr = [{\r\n      \"id\": 1,\r\n      \"label\": \"WAN Ethernet\",\r\n      \"iface\": \"eth1\",\r\n      \"ifc_type\": \"ETHNET\"\r\n    }, {\r\n      \"id\": 3,\r\n      \"label\": \"Mobile#1_APN\",\r\n      \"iface\": \"eth2.1\",\r\n      \"ifc_type\": \"MOBILE_APN\"\r\n    }, {\r\n      \"id\": 55,\r\n      \"label\": \"WAN WiFi (2.4 GHz)\",\r\n      \"iface\": \"ath11\",\r\n      \"ifc_type\": \"WIFI\"\r\n    }, {\r\n      \"id\": 56,\r\n      \"label\": \"WAN WiFi (5 GHz)\",\r\n      \"iface\": \"ath31\",\r\n      \"ifc_type\": \"WIFI\"\r\n    }];\r\n\r\n    let VLAN_SUBNET_NONE = 0;\r\n    let VLAN_SUBNET_1 = 101;\r\n    let VLAN_SUBNET_2 = 102;\r\n    let VLAN_SUBNET_3 = 103;\r\n    let VLAN_SUBNET_4 = 104;\r\n    let VLAN_SUBNET_5 = 105;\r\n    let VLAN_SUBNET_6 = 106;\r\n    let VLAN_SUBNET_7 = 107;\r\n    let VLAN_SUBNET_8 = 108;\r\n\r\n    /* let VLAN_SUBNET_ARR = [VLAN_SUBNET_1, VLAN_SUBNET_2, VLAN_SUBNET_3, VLAN_SUBNET_4,\r\n      VLAN_SUBNET_5, VLAN_SUBNET_6, ]\r\n */\r\n    return (\r\n      <div className=\"gy-modalContainer\" style={visible ? show : hide}>\r\n        <div className=\"mask\" onClick={() => onModalCancel()}></div>\r\n        <div className=\"innerContent modal-dialog-scrollable\" style={visible ? contShow : contHide}>\r\n          \r\n          <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n              <h5 className=\"modal-title\" color=\"primary\">{t('CONN_TBL_TITLE')}-{title}</h5>\r\n              <IconButton aria-label=\"Close\" className=\"padding-0\" onClick={() => onModalCancel()}>\r\n        <CloseIcon />\r\n      </IconButton>\r\n              {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n            <div className=\"modal-body\">\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('INTERFACE')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={dataCfg.cfg.iface_id}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      name: 'iface_id',\r\n                      id: 'iface_id'\r\n                    }}\r\n                  >\r\n                    {ifcObjArr.map(\r\n                      (item, idx) => {\r\n                        return (<option key={item.id} value={item.id}>{item.label}</option>)\r\n                      }\r\n                    )}\r\n                  </Select>}\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('PROTOCOL')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={dataCfg.cfg.protocol_val}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      name: 'protocol_val',\r\n                      id: 'protocol_val'\r\n                    }}\r\n                  >\r\n                    {ptlObj[\"ETHNET\"].map(\r\n                      (item, idx) => {\r\n                        return (<option key={item.val} value={item.val}>{item.label}</option>)\r\n                      }\r\n                    )}\r\n                  </Select>}\r\n\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('BRIDGE_INTERFACE')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={dataCfg.cfg.bridge_iface_id}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      name: 'bridge_iface_id',\r\n                      id: 'bridge_iface_id'\r\n                    }}\r\n                  >\r\n                    <option value={VLAN_SUBNET_1}>NET1</option>\r\n                    <option value={VLAN_SUBNET_2}>NET2</option>\r\n                    <option value={VLAN_SUBNET_3}>NET3</option>\r\n                    <option value={VLAN_SUBNET_4}>NET4</option>\r\n                    <option value={VLAN_SUBNET_5}>NET5</option>\r\n                    <option value={VLAN_SUBNET_6}>NET6</option>\r\n                    <option value={VLAN_SUBNET_7}>NET7</option>\r\n                    <option value={VLAN_SUBNET_8}>NET8</option>\r\n                  </Select>}\r\n\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('PRIORITY')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    fullWidth\r\n                    id=\"prio\"\r\n                    type=\"number\"\r\n                    value={dataCfg.cfg.prio}\r\n                    variant=\"filled\"\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    inputProps={{ min: \"1\", max: \"20\", step: \"1\" }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('ECMP_WEIGHT')} />\r\n                </Grid>\r\n                <Grid item sm={6} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    fullWidth\r\n                    id=\"ecmp_weight\"\r\n                    type=\"number\"\r\n                    value={dataCfg.cfg.ecmp_weight}\r\n                    variant=\"filled\"\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    inputProps={{ min: \"1\", max: \"100\", step: \"1\" }}\r\n                  />\r\n                </Grid>\r\n                <Grid item sm={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('_0_OFF')} />\r\n                </Grid>\r\n              </Grid>\r\n\r\n            </div>\r\n\r\n            <div className=\"modal-footer\">\r\n              <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\r\n                onClick={() => onModalCancel()}>\r\n                {t('CANCEL')}\r\n              </Button>\r\n              <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => onModalApply(dataCfg)}>\r\n                {t('APPLY')}\r\n              </Button>\r\n            </div>\r\n\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst PROSModal = withTranslation()(PROSModalClass);\r\nexport default PROSModal;","D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet_pppoe.js",[],"D:\\gui_code\\sh-app\\src\\components\\wan\\wan_ethernet_dhcp.js",["146","147","148"],"import React, { Component } from 'react';\r\nimport AppContext from \"../../context/app-context\";\r\nimport { withTranslation } from 'react-i18next';\r\nimport {\r\n  Button, TextField, Select, InputBase, Grid\r\n} from '@material-ui/core';\r\nimport * as PAPI from \"../../utility/papi\";\r\n//import '../../css/PROSModal.css'\r\n\r\nclass WANEthDhcpClass extends Component {\r\n  static contextType = AppContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cfg: {\r\n        \"scenario\": 2,\r\n        \"dns6_from\": [2, 2, 2],\r\n        \"dns6_addr\": [\"\", \"\", \"\"],\r\n        \"dns4_from\": [1, 1, 1],\r\n        \"dns4_addr\": [\"\", \"\", \"\"],\r\n        \"dns6_from_second\": [1, 1, 1],\r\n        \"dns6_addr_second\": [\"\", \"\", \"\"],\r\n        \"dns4_from_second\": [1, 1, 1],\r\n        \"dns4_addr_second\": [\"\", \"\", \"\"]\r\n      }\r\n    }\r\n    console.log(\"cfgdata ==\", this.state.cfg);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let vm = this;\r\n    let { cfgShowLoading } = this.context;\r\n    cfgShowLoading(true);\r\n    //this.context.cfgShowLoading(true);\r\n    setTimeout(function () {\r\n      vm.getData();\r\n      cfgShowLoading(false);\r\n    }, 1000)\r\n    //this.getData();\r\n  }\r\n\r\n  getData = () => {\r\n    PAPI.PApiGet({ url: \"dns.cgi?act=config&index=6\" })\r\n      .then((data) => {\r\n\r\n        this.setState((prevState, props) => ({\r\n          cfg: data.config\r\n        }));\r\n        console.log(\"getData\", JSON.stringify(this.state.cfg));\r\n      })\r\n      .catch((err) => console.log(err));\r\n  };\r\n\r\n  setInputValueNum = (e) => {\r\n    let obj = {\r\n      'dns4_from_0': 0,\r\n      'dns4_from_1': 1,\r\n      'dns4_from_2': 2\r\n    };\r\n    console.log(\"setInputValueNum target id =\", e.target.id, e.target.value);\r\n    let cfg = { ...this.state.cfg };//JSON.parse(JSON.stringify(this.state.cfg));\r\n    cfg.dns4_from[obj[e.target.id]] = parseInt(e.target.value);\r\n    this.setState(() => ({\r\n      cfg\r\n    }));\r\n    console.log(\"this.state.cfg111111 =\", JSON.stringify(this.state.cfg));\r\n  }\r\n\r\n  setInputValue = (e) => {\r\n    let obj = {\r\n      'dhcpc_dns4_addr_0': 0,\r\n      'dhcpc_dns4_addr_1': 1,\r\n      'dhcpc_dns4_addr_2': 2\r\n    }\r\n    console.log(\"setInputValueNum target id =\", e.target.id, e.target.value);\r\n    let cfg = JSON.parse(JSON.stringify(this.state.cfg));\r\n    cfg.dns4_addr[obj[e.target.id]] = e.target.value;\r\n    this.setState((state, props) => ({\r\n      cfg\r\n    }));\r\n  }\r\n\r\n  onApply = () => {\r\n    console.log(\"onApply cfg=\", JSON.stringify(this.state.cfg));\r\n    /* setData(); */\r\n\r\n  }\r\n\r\n  onReset = () => {\r\n    console.log(\"onReset=\", JSON.stringify(this.state.cfg));\r\n    this.getData();\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const { t } = this.props;\r\n    const { cfg } = this.state;\r\n\r\n    return (\r\n      <>        \r\n            <div className=\"subTitle\">{t('WANDNS_LEGEND_DNS')}</div>\r\n              \r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item md={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('WANDNS_IPV4_DNS_SERVER') + \" #1\"} />\r\n                </Grid>\r\n\r\n                <Grid item md={4} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={cfg.dns4_from[0].toString()}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      id: 'dns4_from_0'\r\n                    }}\r\n                  >\r\n                    <option key=\"0\" value=\"0\">{t('WANDNS_DNS_SERVER_FROM_ISP')}</option>\r\n                    <option key=\"1\" value=\"1\">{t('WANDNS_DNS_SERVER_USER_DEFINED')}</option>\r\n                    <option key=\"2\" value=\"2\">{t('WANDNS_DNS_SERVER_NONE')}</option>\r\n\r\n                  </Select>}\r\n                </Grid>\r\n\r\n                <Grid item md={4} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    id=\"dhcpc_dns4_addr_0\"\r\n                    value={cfg.dns4_addr[0]}\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    onChange={(e) => this.setInputValue(e)}\r\n                    disabled={cfg.dns4_from[0] != 1}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item md={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('WANDNS_IPV4_DNS_SERVER') + \" #2\"} />\r\n                </Grid>\r\n\r\n                <Grid item md={4} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={cfg.dns4_from[1].toString()}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      id: 'dns4_from_1'\r\n                    }}\r\n                  >\r\n                    <option key=\"0\" value=\"0\">{t('WANDNS_DNS_SERVER_FROM_ISP')}</option>\r\n                    <option key=\"1\" value=\"1\">{t('WANDNS_DNS_SERVER_USER_DEFINED')}</option>\r\n                    <option key=\"2\" value=\"2\">{t('WANDNS_DNS_SERVER_NONE')}</option>\r\n\r\n                  </Select>}\r\n                </Grid>\r\n\r\n                <Grid item md={4} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    id=\"dhcpc_dns4_addr_1\"\r\n                    value={cfg.dns4_addr[1]}\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    onChange={(e) => this.setInputValue(e)}\r\n                    disabled={cfg.dns4_from[1] != 1}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid container item xs={12} spacing={1}>\r\n                <Grid item md={3} xs={12}>\r\n                  <InputBase\r\n                    className=\"base-input\"\r\n                    value={t('WANDNS_IPV4_DNS_SERVER') + \" #3\"} />\r\n                </Grid>\r\n\r\n                <Grid item md={4} xs={12}>\r\n                  {<Select\r\n                    native\r\n                    value={cfg.dns4_from[2].toString()}\r\n                    onChange={(e) => this.setInputValueNum(e)}\r\n                    fullWidth\r\n                    inputProps={{\r\n                      id: 'dns4_from_2'\r\n                    }}\r\n                  >\r\n                    <option key=\"0\" value=\"0\">{t('WANDNS_DNS_SERVER_FROM_ISP')}</option>\r\n                    <option key=\"1\" value=\"1\">{t('WANDNS_DNS_SERVER_USER_DEFINED')}</option>\r\n                    <option key=\"2\" value=\"2\">{t('WANDNS_DNS_SERVER_NONE')}</option>\r\n\r\n                  </Select>}\r\n                </Grid>\r\n\r\n                <Grid item md={4} xs={12}>\r\n                  <TextField\r\n                    hiddenLabel\r\n                    id=\"dhcpc_dns4_addr_2\"\r\n                    value={cfg.dns4_addr[2]}\r\n                    variant=\"filled\"\r\n                    fullWidth\r\n                    onChange={(e) => this.setInputValue(e)}\r\n                    disabled={cfg.dns4_from[2] != 1}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n         \r\n          \r\n          \r\n          <div className=\"pageFooterContainer p-top-bottom-30\">\r\n            <div className=\"pageFooter\">\r\n              <Button className=\"m-left-right-20 btn btn-cancel\" variant=\"contained\"\r\n                onClick={() => this.onReset()}>\r\n                {t('CANCEL')}\r\n              </Button>\r\n              <Button className=\"m-left-right-20 btn btn-apply\" variant=\"contained\" onClick={() => this.onApply()}>\r\n                {t('APPLY')}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n      \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst WANEthDhcp = withTranslation()(WANEthDhcpClass);\r\nexport default WANEthDhcp;\r\n\r\n\r\n\r\n",{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":2,"column":13,"nodeType":"155","messageId":"156","endLine":2,"endColumn":17},{"ruleId":"153","severity":1,"message":"157","line":1,"column":17,"nodeType":"155","messageId":"156","endLine":1,"endColumn":25},{"ruleId":"153","severity":1,"message":"158","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":14},{"ruleId":"153","severity":1,"message":"157","line":1,"column":16,"nodeType":"155","messageId":"156","endLine":1,"endColumn":24},{"ruleId":"153","severity":1,"message":"159","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":23},{"ruleId":"153","severity":1,"message":"160","line":23,"column":5,"nodeType":"155","messageId":"156","endLine":23,"endColumn":10},{"ruleId":"153","severity":1,"message":"161","line":24,"column":5,"nodeType":"155","messageId":"156","endLine":24,"endColumn":12},{"ruleId":"162","severity":1,"message":"163","line":35,"column":15,"nodeType":"164","messageId":"165","endLine":35,"endColumn":17},{"ruleId":"153","severity":1,"message":"166","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":22},{"ruleId":"153","severity":1,"message":"167","line":5,"column":8,"nodeType":"155","messageId":"156","endLine":5,"endColumn":18},{"ruleId":"153","severity":1,"message":"168","line":6,"column":8,"nodeType":"155","messageId":"156","endLine":6,"endColumn":23},{"ruleId":"153","severity":1,"message":"169","line":9,"column":8,"nodeType":"155","messageId":"156","endLine":9,"endColumn":16},{"ruleId":"153","severity":1,"message":"170","line":10,"column":8,"nodeType":"155","messageId":"156","endLine":10,"endColumn":17},{"ruleId":"149","replacedBy":"171"},{"ruleId":"151","replacedBy":"172"},{"ruleId":"153","severity":1,"message":"173","line":5,"column":3,"nodeType":"155","messageId":"156","endLine":5,"endColumn":12},{"ruleId":"153","severity":1,"message":"174","line":6,"column":3,"nodeType":"155","messageId":"156","endLine":6,"endColumn":9},{"ruleId":"153","severity":1,"message":"175","line":6,"column":11,"nodeType":"155","messageId":"156","endLine":6,"endColumn":21},{"ruleId":"153","severity":1,"message":"176","line":6,"column":23,"nodeType":"155","messageId":"156","endLine":6,"endColumn":32},{"ruleId":"153","severity":1,"message":"177","line":6,"column":34,"nodeType":"155","messageId":"156","endLine":6,"endColumn":40},{"ruleId":"153","severity":1,"message":"178","line":6,"column":42,"nodeType":"155","messageId":"156","endLine":6,"endColumn":51},{"ruleId":"153","severity":1,"message":"179","line":7,"column":3,"nodeType":"155","messageId":"156","endLine":7,"endColumn":8},{"ruleId":"153","severity":1,"message":"180","line":7,"column":10,"nodeType":"155","messageId":"156","endLine":7,"endColumn":14},{"ruleId":"153","severity":1,"message":"181","line":51,"column":7,"nodeType":"155","messageId":"156","endLine":51,"endColumn":16},{"ruleId":"153","severity":1,"message":"182","line":63,"column":10,"nodeType":"155","messageId":"156","endLine":63,"endColumn":15},{"ruleId":"153","severity":1,"message":"183","line":64,"column":10,"nodeType":"155","messageId":"156","endLine":64,"endColumn":15},{"ruleId":"153","severity":1,"message":"184","line":71,"column":9,"nodeType":"155","messageId":"156","endLine":71,"endColumn":16},{"ruleId":"153","severity":1,"message":"185","line":120,"column":12,"nodeType":"155","messageId":"156","endLine":120,"endColumn":25},{"ruleId":"153","severity":1,"message":"186","line":131,"column":12,"nodeType":"155","messageId":"156","endLine":131,"endColumn":19},{"ruleId":"153","severity":1,"message":"187","line":136,"column":12,"nodeType":"155","messageId":"156","endLine":136,"endColumn":19},{"ruleId":"153","severity":1,"message":"173","line":11,"column":3,"nodeType":"155","messageId":"156","endLine":11,"endColumn":12},{"ruleId":"153","severity":1,"message":"188","line":16,"column":10,"nodeType":"155","messageId":"156","endLine":16,"endColumn":20},{"ruleId":"189","severity":1,"message":"190","line":80,"column":17,"nodeType":"191","messageId":"192","endLine":80,"endColumn":28},{"ruleId":"193","severity":1,"message":"194","line":83,"column":6,"nodeType":"195","endLine":83,"endColumn":27,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":83,"column":7,"nodeType":"198","endLine":83,"endColumn":26},{"ruleId":"193","severity":1,"message":"199","line":108,"column":6,"nodeType":"195","endLine":108,"endColumn":8,"suggestions":"200"},{"ruleId":"153","severity":1,"message":"201","line":187,"column":11,"nodeType":"155","messageId":"156","endLine":187,"endColumn":19},{"ruleId":"153","severity":1,"message":"202","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":20},{"ruleId":"153","severity":1,"message":"173","line":6,"column":3,"nodeType":"155","messageId":"156","endLine":6,"endColumn":12},{"ruleId":"153","severity":1,"message":"203","line":7,"column":3,"nodeType":"155","messageId":"156","endLine":7,"endColumn":7},{"ruleId":"153","severity":1,"message":"204","line":8,"column":3,"nodeType":"155","messageId":"156","endLine":8,"endColumn":14},{"ruleId":"193","severity":1,"message":"205","line":35,"column":6,"nodeType":"195","endLine":35,"endColumn":8,"suggestions":"206"},{"ruleId":"153","severity":1,"message":"207","line":71,"column":9,"nodeType":"155","messageId":"156","endLine":71,"endColumn":22},{"ruleId":"153","severity":1,"message":"208","line":72,"column":9,"nodeType":"155","messageId":"156","endLine":72,"endColumn":25},{"ruleId":"153","severity":1,"message":"209","line":74,"column":9,"nodeType":"155","messageId":"156","endLine":74,"endColumn":26},{"ruleId":"153","severity":1,"message":"210","line":138,"column":9,"nodeType":"155","messageId":"156","endLine":138,"endColumn":25},{"ruleId":"162","severity":1,"message":"211","line":137,"column":48,"nodeType":"164","messageId":"165","endLine":137,"endColumn":50},{"ruleId":"162","severity":1,"message":"211","line":174,"column":48,"nodeType":"164","messageId":"165","endLine":174,"endColumn":50},{"ruleId":"162","severity":1,"message":"211","line":211,"column":48,"nodeType":"164","messageId":"165","endLine":211,"endColumn":50},"no-native-reassign",["212"],"no-negated-in-lhs",["213"],"no-unused-vars","'PAPI' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Navbar' is defined but never used.","'LanguageContext' is defined but never used.","'Debug' is assigned a value but never used.","'Release' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'FolderOpenIcon' is defined but never used.","'FolderIcon' is defined but never used.","'DescriptionIcon' is defined but never used.","'StarIcon' is defined but never used.","'GradeIcon' is defined but never used.",["212"],["213"],"'Container' is defined but never used.","'Button' is defined but never used.","'IconButton' is defined but never used.","'TextField' is defined but never used.","'Select' is defined but never used.","'InputBase' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'useStyles' is assigned a value but never used.","'wanst' is assigned a value but never used.","'pppoe' is assigned a value but never used.","'classes' is assigned a value but never used.","'setInputValue' is defined but never used.","'onApply' is defined but never used.","'onReset' is defined but never used.","'withStyles' is defined but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cfgdata'. Either include it or remove the dependency array.","ArrayExpression",["214"],"React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression","React Hook useEffect has missing dependencies: 'cfgShowLoading' and 'getData'. Either include them or remove the dependency array.",["215"],"'act_prof' is assigned a value but never used.","'makeStyles' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","React Hook useEffect has a missing dependency: 'cfgShowLoading'. Either include it or remove the dependency array.",["216"],"'WAN_PROTO_OFF' is assigned a value but never used.","'WAN_PROTO_DHCPC6' is assigned a value but never used.","'WAN_PROTO_MGMT_RT' is assigned a value but never used.","'VLAN_SUBNET_NONE' is assigned a value but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation",{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [cfgdata]",{"range":"223","text":"224"},"Update the dependencies array to be: [cfgShowLoading, getData]",{"range":"225","text":"226"},"Update the dependencies array to be: [cfgShowLoading]",{"range":"227","text":"228"},[2414,2435],"[cfgdata]",[3037,3039],"[cfgShowLoading, getData]",[1022,1024],"[cfgShowLoading]"]